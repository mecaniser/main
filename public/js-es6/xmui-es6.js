function t(e) { return (t = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (t) { return typeof t } : function (t) { return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t })(e) } function e(t, e) { if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function") } function n(t, e) { for (var n = 0; n < e.length; n++) { var i = e[n]; i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(t, i.key, i) } } function i(t, e, i) { return e && n(t.prototype, e), i && n(t, i), t } function o(t, e, n) { return e in t ? Object.defineProperty(t, e, { value: n, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = n, t } function s(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), e && r(t, e) } function a(t) { return (a = Object.setPrototypeOf ? Object.getPrototypeOf : function (t) { return t.__proto__ || Object.getPrototypeOf(t) })(t) } function r(t, e) { return (r = Object.setPrototypeOf || function (t, e) { return t.__proto__ = e, t })(t, e) } function c(t) { if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return t } function u(t, e) { return !e || "object" != typeof e && "function" != typeof e ? c(t) : e } function l(t, e) { for (; !Object.prototype.hasOwnProperty.call(t, e) && null !== (t = a(t));); return t } function _(t, e, n) { return (_ = "undefined" != typeof Reflect && Reflect.get ? Reflect.get : function (t, e, n) { var i = l(t, e); if (i) { var o = Object.getOwnPropertyDescriptor(i, e); return o.get ? o.get.call(n) : o.value } })(t, e, n || t) } function h(t, e, n, i) { return (h = "undefined" != typeof Reflect && Reflect.set ? Reflect.set : function (t, e, n, i) { var s, a = l(t, e); if (a) { if ((s = Object.getOwnPropertyDescriptor(a, e)).set) return s.set.call(i, n), !0; if (!s.writable) return !1 } if (s = Object.getOwnPropertyDescriptor(i, e)) { if (!s.writable) return !1; s.value = n, Object.defineProperty(i, e, s) } else o(i, e, n); return !0 })(t, e, n, i) } function d(t, e, n, i, o) { if (!h(t, e, n, i || t) && o) throw new Error("failed to set property"); return n } function p(t) { return function (t) { if (Array.isArray(t)) { for (var e = 0, n = new Array(t.length); e < t.length; e++)n[e] = t[e]; return n } }(t) || function (t) { if (Symbol.iterator in Object(t) || "[object Arguments]" === Object.prototype.toString.call(t)) return Array.from(t) }(t) || function () { throw new TypeError("Invalid attempt to spread non-iterable instance") }() } var m, g, v, f = /^\s*<[\S\s]*$/, y = function () { function t() { e(this, t), this._elements = new Array } return i(t, [{ key: "append", value: function (t) { var e = k(t); return this._elements.forEach((function (t, n) { e.forEach((function (e) { var i = 0 !== n ? e.cloneNode() : e; t.appendChild(i) })) })), this } }, { key: "remove", value: function () { this._elements.forEach((function (t) { t.parentNode.removeChild(t) })) } }, { key: "prepend", value: function (t) { var e = k(t); return this._elements.forEach((function (t, n) { var i = t.firstChild; e.forEach((function (e) { var o = 0 !== n ? e.cloneNode() : e; t.insertBefore(o, i) })) })), this } }, { key: "content", value: function (t) { return this.empty().append(t) } }, { key: "disable", value: function () { return this.disabled(!0) } }, { key: "enable", value: function () { return this.disabled(!1) } }, { key: "attr", value: function (t) { return this._elements.forEach((function (e) { !function (t, e) { Object.keys(e).forEach((function (n) { e.hasOwnProperty(n) && t.setAttribute(n, e[n]) })) }(e, t) })), this } }, { key: "focus", value: function () { return this._elements.forEach((function (t) { t.focus() })), this } }, { key: "addClass", value: function (t) { return this._elements.forEach((function (e) { !function (t, e) { w(t, e) || (t.className += " " + e, t.className = t.className.replace(/  +/g, " ")) }(e, t) })), this } }, { key: "removeClass", value: function (t) { return this._elements.forEach((function (e) { !function (t, e) { if (w(t, e)) { var n = new RegExp("(\\s|^)" + e + "(\\s|$)"); t.className = t.className.replace(n, " ").replace(/  +/g, " ") } }(e, t) })), this } }, { key: "setClass", value: function (t) { return this._elements.forEach((function (e) { e.className = t })), this } }, { key: "find", value: function (e) { var n = new t; return this._elements.forEach((function (t) { b(t, e).forEach((function (t) { n.push(t) })) })), n } }, { key: "hide", value: function () { return this._elements.forEach((function (t) { t.style.display = "none" })), this } }, { key: "show", value: function () { return this._elements.forEach((function (t) { t.style.display = "" })), this } }, { key: "empty", value: function () { return this._elements.forEach((function (t) { t.innerHTML = "" })), this } }, { key: "text", value: function (t) { return this._elements.forEach((function (e) { e.textContent = t })), this } }, { key: "on", value: function (t, e) { var n = this; return t.trim().split(" ").forEach((function (t) { n._elements.forEach((function (n) { n.addEventListener(t, e) })) })), this } }, { key: "hover", value: function (t, e) { return this._elements.forEach((function (n) { n.addEventListener("mouseover", t), n.addEventListener("mouseout", e) })), this } }, { key: "first", value: function () { var e = new t; return this._elements.length ? e.push(this._elements[0]) : e } }, { key: "get", value: function (t) { return this._elements[t] } }, { key: "disabled", value: function (t) { return this._elements.forEach((function (e) { e.disabled != t && (e.disabled = t) })), this } }, { key: "blockInteraction", value: function () { var t = this; return this._elements.forEach((function (e) { e.style.pointerEvents = "none", e.addEventListener("keydown", t.keydownBlockEventHandler) })), this } }, { key: "unblockInteraction", value: function () { var t = this; return this._elements.forEach((function (e) { e.style.pointerEvents = "auto", e.removeEventListener("keydown", t.keydownBlockEventHandler) })), this } }, { key: "push", value: function () { var t; return (t = this._elements).push.apply(t, arguments), this } }, { key: "keydownBlockEventHandler", value: function (t) { t.preventDefault() } }, { key: "length", get: function () { return this._elements.length } }, { key: "elements", get: function () { return p(this._elements) } }], [{ key: "createTSQueryElement", value: function (e) { var n = k(e), i = new t; return i.push.apply(i, p(n)), i } }]), t }(); function k(t) { var e, n; return t instanceof y ? t.elements : t instanceof Array ? t : t instanceof HTMLElement ? [t] : f.test(t) ? (e = t, (n = document.createElement("div")).innerHTML = e, C(n.childNodes)) : b(document, t) } function C(t) { var e = []; return [].forEach.call(t, (function (t) { t instanceof HTMLElement && e.push(t) })), e } function b(t, e) { return C(t.querySelectorAll(e)) } function w(t, e) { return !!t.className.match(new RegExp("(\\s|^)" + e + "(\\s|$)")) } function x(t) { return y.createTSQueryElement(t) } !function (t) { t.Mousedown = "mousedown", t.Mouseup = "mouseup", t.Mouseenter = "mouseenter", t.Mouseleave = "mouseleave", t.Click = "click" }(m || (m = {})), function (t) { t.Keydown = "keydown", t.Keypress = "keypress" }(g || (g = {})), function (t) { t.Selected = "xmui--selected", t.Disabled = "xmui--disabled", t.Active = "xmui--active", t.Error = "xmui--error" }(v || (v = {})); var S, I = function () { function t() { e(this, t), this._active = !1, this._selected = !1, this._disabled = !1, this._error = !1, this._key = "", this.element = this.buildElement() } return i(t, [{ key: "appendInto", value: function (t) { t.append(this.element) } }, { key: "prependInto", value: function (t) { t.prepend(this.element) } }, { key: "remove", value: function () { this.element.remove() } }, { key: "onClick", value: function (t) { this.onMouseEvent(m.Click, t) } }, { key: "onMousedown", value: function (t) { this.onMouseEvent(m.Mousedown, t) } }, { key: "onMouseup", value: function (t) { this.onMouseEvent(m.Mouseup, t) } }, { key: "onMouseenter", value: function (t) { this.onMouseEvent(m.Mouseenter, t) } }, { key: "onMouseleave", value: function (t) { this.onMouseEvent(m.Mouseleave, t) } }, { key: "onMouseEvent", value: function (t, e) { var n = this; this.element.on(t, (function (t) { e(n, t) })) } }, { key: "onKeydown", value: function (t) { this.onKeyboardEvent(g.Keydown, t) } }, { key: "onKeypress", value: function (t) { this.onKeyboardEvent(g.Keypress, t) } }, { key: "onKeyboardEvent", value: function (t, e) { var n = this; this.element.on(t, (function (t) { e(n, t) })) } }, { key: "onPaste", value: function (t) { this.element.on("paste", t) } }, { key: "onCut", value: function (t) { this.element.on("cut", t) } }, { key: "onBlur", value: function (t) { this.element.on("blur", t) } }, { key: "onFocus", value: function (t) { this.element.on("focus", t) } }, { key: "onFocusIn", value: function (t) { this.element.on("focusin", t) } }, { key: "onFocusOut", value: function (t) { this.element.on("focusout", t) } }, { key: "onHover", value: function (t, e) { this.element.hover(t, e) } }, { key: "addClass", value: function (t) { this.element.addClass(t) } }, { key: "removeClass", value: function (t) { this.element.removeClass(t) } }, { key: "focus", value: function () { var t = this; setTimeout((function () { t.element.focus() })) } }, { key: "scrollIntoView", value: function () { var t = this; setTimeout((function () { t.htmlElement.scrollIntoView() })) } }, { key: "show", set: function (t) { t ? this.element.show() : this.element.hide() } }, { key: "id", set: function (t) { this.htmlElement.id = t }, get: function () { return this.htmlElement.id } }, { key: "value", set: function (t) { this._value = t }, get: function () { return this._value } }, { key: "className", set: function (t) { this.element.setClass(t) } }, { key: "ariaRole", set: function (t) { this.attr = { "aria-role": t } } }, { key: "role", set: function (t) { this.attr = { role: t } } }, { key: "ariaLabel", set: function (t) { this.attr = { "aria-label": t } } }, { key: "ariaLabeledBy", set: function (t) { this.attr = { "aria-labelledby": t } } }, { key: "ariaDescribedBy", set: function (t) { this.attr = { "aria-describedby": t } } }, { key: "ariaMultiselectable", set: function (t) { this.attr = { "aria-multiselectable": t.toString() } } }, { key: "ariaActiveDescendant", set: function (t) { this.attr = { "aria-activedescendant": t } } }, { key: "ariaLive", set: function (t) { this.attr = { "aria-live": t } } }, { key: "ariaSelected", set: function (t) { this.attr = { "aria-selected": t.toString() } } }, { key: "ariaDisabled", set: function (t) { this.attr = { "aria-disabled": t.toString() } } }, { key: "automationId", set: function (t) { this.attr = { "tsc-name": t } } }, { key: "tabindex", set: function (t) { this.attr = { tabindex: t.toString() } } }, { key: "spellcheck", set: function (t) { this.attr = { spellcheck: t ? "true" : "false" } } }, { key: "attr", set: function (t) { this.element.attr(t) } }, { key: "htmlElement", get: function () { return this.element.get(0) } }, { key: "active", set: function (t) { t !== this._active && t ? this.addClass(v.Active) : this.removeClass(v.Active), this._active = t }, get: function () { return this._active } }, { key: "selected", set: function (t) { t !== this._selected && t ? this.addClass(v.Selected) : this.removeClass(v.Selected), this._selected = t, this.ariaSelected = t }, get: function () { return this._selected } }, { key: "disabled", set: function (t) { t !== this._disabled && t ? this.addClass(v.Disabled) : this.removeClass(v.Disabled), this._disabled = t, this.ariaDisabled = t }, get: function () { return this._disabled } }, { key: "key", get: function () { return this._key }, set: function (t) { this._key = t } }, { key: "error", set: function (t) { this._error = t, t ? this.addClass(v.Error) : this.removeClass(v.Error) }, get: function () { return this._error } }]), t }(), E = function (t) { function n() { var t, i = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : ""; return e(this, n), (t = u(this, a(n).call(this))).setText(i), t } return s(n, I), i(n, [{ key: "buildElement", value: function () { return x("<span></span>") } }, { key: "setText", value: function (t) { this.element.text(null == t ? "" : t) } }]), n }(), A = function (t) { function n() { var t; return e(this, n), (t = u(this, a(n).apply(this, arguments))).children = [], t } return s(n, I), i(n, [{ key: "prependChild", value: function (t) { t.prependInto(this.element), this.children.push(t) } }, { key: "prependChildren", value: function () { for (var t = this, e = arguments.length, n = new Array(e), i = 0; i < e; i++)n[i] = arguments[i]; n.forEach((function (e) { t.prependChild(e) })) } }, { key: "appendChild", value: function (t) { t.appendInto(this.element), this.children.push(t) } }, { key: "appendChildren", value: function () { for (var t = this, e = arguments.length, n = new Array(e), i = 0; i < e; i++)n[i] = arguments[i]; n.forEach((function (e) { t.appendChild(e) })) } }, { key: "removeChild", value: function (t) { this.children = this.children.filter((function (e) { return e !== t })), t.remove() } }, { key: "setContent", value: function (t) { this.empty(), this.appendChild(t) } }, { key: "empty", value: function () { this.element.empty(), this.children = [] } }, { key: "getNextChild", value: function (t) { var e = this.getChildren().length, n = (this.getChildIndex(t) + 1) % e; return this.getChildByIndex(n) } }, { key: "getPrevChild", value: function (t) { var e = this.getChildren().length, n = (this.getChildIndex(t) + e - 1) % e; return this.getChildByIndex(n) } }, { key: "getChildByIndex", value: function (t) { return this.children[t] } }, { key: "getChildren", value: function () { return this.children } }, { key: "getChildIndex", value: function (t) { return this.children.indexOf(t) } }]), n }(), P = function (t) { function n() { return e(this, n), u(this, a(n).apply(this, arguments)) } return s(n, A), i(n, [{ key: "buildElement", value: function () { return x("<div></div>") } }]), n }(), T = "xmui-info-panel", R = "xmui-info-panel-title", M = "xmui-info-panel-instructions", B = function (t) { function n() { var t; e(this, n), (t = u(this, a(n).call(this))).className = T, t.titleComponent = new E, t.titleComponent.className = "".concat(T, "_title"), t.titleComponent.automationId = R, t.instructionsComponent = new E, t.instructionsComponent.className = "".concat(T, "_instructions"), t.instructionsComponent.automationId = M, t.instructionsComponent.show = !1; var i = new P; return i.className = "".concat(T, "_container"), i.appendChildren(t.titleComponent, t.instructionsComponent), t.appendChild(i), t } return s(n, P), i(n, [{ key: "setTitle", value: function (t) { this.titleComponent.setText(t) } }, { key: "setInstructions", value: function (t) { var e = t ? t.trim() : ""; this.instructionsComponent.setText(e), this.instructionsComponent.show = !!e } }]), n }(), N = "xmui-header-panel", D = function (t) { function n() { var t, i = arguments.length > 0 && void 0 !== arguments[0] && arguments[0]; return e(this, n), (t = u(this, a(n).call(this))).className = N, t.addClass("".concat(N, i ? "--short" : "--normal")), t.iconComp = new P, t.iconComp.className = "".concat(N, "_icon"), t.iconComp.show = !1, t.textComp = new E, t.textComp.className = "".concat(N, "_text"), t.appendChildren(t.iconComp, t.textComp), t } return s(n, P), i(n, [{ key: "setText", value: function (t) { this.textComp.setText(t) } }, { key: "setIcon", value: function (t) { this.iconComp.className = "".concat(N, "_icon ").concat(t), this.iconComp.show = !0 } }]), n }(), L = "xmui-action-panel", F = function (t) { function n() { var t, i = arguments.length > 0 && void 0 !== arguments[0] && arguments[0]; return e(this, n), (t = u(this, a(n).call(this))).className = L, t.addClass("".concat(L, i ? "--short" : "--normal")), t.leftButtonsContainer = new P, t.leftButtonsContainer.className = "".concat(L, "_left"), t.rightButtonsContainer = new P, t.rightButtonsContainer.className = "".concat(L, "_right"), t.appendChildren(t.leftButtonsContainer, t.rightButtonsContainer), t } return s(n, P), i(n, [{ key: "addLeftButton", value: function (t) { this.leftButtonsContainer.appendChild(t) } }, { key: "addRightButton", value: function (t) { this.rightButtonsContainer.appendChildren(t) } }]), n }(), q = "xmui-busy-indicator", O = function (t) { function n() { var t; e(this, n), (t = u(this, a(n).call(this))).className = q; var i = new P; return i.className = "".concat(q, "_animation"), t.appendChild(i), t } return s(n, P), n }(); !function (t) { t.User = "xmui-icon-user", t.Remove = "xmui-icon-remove", t.Rename = "xmui-icon-rename", t.More = "xmui-icon-more", t.PasswordVisible = "xmui-icon-password-input-visible", t.PasswordHidden = "xmui-icon-password-input-hidden", t.Device = "xmui-icon-device", t.Registered = "xmui-icon-registered", t.WebBrowser = "xmui-icon-web-browser", t.Expand = "xmui-icon-expand", t.LockedState = "xmui-icon-locked-state", t.MobileApproveWaiting = "xmui-icon-mobile-approve-waiting", t.WaitForTicket = "xmui-icon-wait-for-ticket", t.Checked = "xmui-icon-checked", t.Unchecked = "xmui-icon-unchecked", t.Checkmark = "xmui-icon-checkmark", t.Cancellation = "xmui-icon-cancellation", t.Expiration = "xmui-icon-expired", t.Information = "xmui-icon-information", t.Confirmation = "xmui-icon-confirmation", t.Rejection = "xmui-icon-rejection", t.AuthLocked = "xmui-icon-locked", t.Error = "xmui-icon-error", t.Unregister = "xmui-icon-unregister", t.Fallback = "xmui-icon-fallback", t.Promotion = "xmui-icon-promotion", t.PasswordAuth = "xmui-icon-password-auth", t.PincodeAuth = "xmui-icon-pincode-auth", t.PatternAuth = "xmui-icon-pattern-auth", t.OtpAuth = "xmui-icon-otp-auth", t.VoiceAuth = "xmui-icon-voice-auth", t.QuestionsAuth = "xmui-icon-questions-auth", t.TotpAuth = "xmui-icon-totp-auth", t.MobileApproveAuth = "xmui-icon-mobile-approve-auth", t.GenericAuth = "xmui-icon-generic-auth", t.SmsChannel = "xmui-icon-sms-channel", t.EmailChannel = "xmui-icon-email-channel", t.PushChannel = "xmui-icon-push-channel", t.VoiceChannel = "xmui-icon-voice-channel" }(S || (S = {})); var j = "xmui-page", U = function (t) { function n(t, i) { var o; e(this, n), (o = u(this, a(n).call(this))).className = j, o.role = "dialog", o.headerPanel = new D, o.headerSeparator = new P, o.headerSeparator.className = "".concat(j, "_header-info-separator"), o.appendChildren(o.headerPanel, o.headerSeparator), o.infoPanel = new B, o.infoPanel.show = !1, o.appendChild(o.infoPanel), o.contentContainer = new P, o.contentContainer.className = "".concat(j, "_content"), o.busyIndicator = new O, o.contentContainer.appendChild(o.busyIndicator), o.busy = !1; var s = new P; return s.className = "".concat(j, "_content-actions-separator"), o.actionPanel = new F, o.appendChildren(o.contentContainer, s, o.actionPanel), o.automationId = t, o.addClass(i), o } return s(n, P), i(n, [{ key: "setInstructions", value: function (t) { this.infoPanel.setInstructions(t), this.infoPanel.show = !0 } }, { key: "setUserName", value: function (t) { this.headerPanel.setText(t), this.headerPanel.setIcon(S.User) } }, { key: "blockInteraction", value: function () { this.element.blockInteraction() } }, { key: "unblockInteraction", value: function () { this.element.unblockInteraction() } }, { key: "setContent", value: function (t) { this.contentContainer.appendChild(t) } }, { key: "setTitle", value: function (t) { this.infoPanel.setTitle(t), this.infoPanel.show = !0 } }, { key: "addLeftButton", value: function (t) { this.actionPanel.addLeftButton(t) } }, { key: "addRightButton", value: function (t) { this.actionPanel.addRightButton(t) } }, { key: "busy", set: function (t) { this.busyIndicator.show = t } }, { key: "error", set: function (t) { this.infoPanel.error = t } }]), n }(), H = function t() { e(this, t) }; H.button_cancel = "xmui-button-cancel", H.button_back = "xmui-button-back", H.button_abort = "xmui-button-abort", H.button_retry = "xmui-button-retry", H.button_continue = "xmui-button-continue", H.button_reset = "xmui-button-reset", H.button_change_method = "xmui-button-change-method", H.button_select_method = "xmui-button-select-method", H.button_send_to_all = "xmui-button-send-to-all", H.button_actions_list = "xmui-button-actions-list", H.button_skip = "xmui-button-skip", H.button_rename = "xmui-button-rename", H.button_identify = "xmui-button-identify", H.button_remove = "xmui-button-remove", H.button_escape = "xmui-button-escape", H.list_actions = "xmui-list-actions", H.list_item_text_state = "xmui-list-item-text-state", H.list_item_icon_state = "xmui-list-item-icon-state", H.dialog_recovery = "xmui-dialog-recovery", H.dialog_cancellation = "xmui-dialog-cancellation", H.dialog_confirm = "xmui-dialog-confirm", H.dialog_information = "xmui-dialog-information", H.dialog_title = "xmui-dialog-title", H.dialog_message = "xmui-dialog-message", H.dialog_fallback = "xmui-dialog-fallback", H.dialog_registration_promotion_intro = "xmui-dialog-registration-promotion-intro", H.popup_dialog_confirm = "xmui-popup-dialog-confirm", H.popup_dialog_input = "xmui-popup-dialog-input", H.input_password = "xmui-input-password", H.input_repeat_password = "xmui-input-repeat-password", H.input_pin_code = "xmui-input-pin-code", H.input_pattern_lock = "xmui-input-pattern-lock", H.input_otp_code = "xmui-input-otp-code", H.input_totp_code = "xmui-input-totp-code", H.input_text = "xmui-input-text", H.input_email = "xmui-input-email", H.input_security_question = "xmui-input-security-question", H.input_mobile_phone_number = "xmui-input-mobile-phone-number", H.input_mobile_phone_coutry_code = "xmui-input-mobile-phone-country-code", H.page_password_auth = "xmui-page-password-auth", H.page_password_reg = "xmui-page-password-reg", H.page_pin_auth = "xmui-page-pin-auth", H.page_pin_reg = "xmui-page-pin-reg", H.page_pattern_auth = "xmui-page-pattern-auth", H.page_pattern_reg = "xmui-page-pattern-reg", H.page_otp_auth = "xmui-page-otp-auth", H.page_totp_auth = "xmui-page-totp-auth", H.page_ticket_wait = "xmui-page-ticket-wait", H.page_mobile_approve = "xmui-page-mobile-approve", H.page_select_device = "xmui-page-select-device", H.page_otp_select_channel = "xmui-page_otp_select_channel", H.page_configure_authenticators = "xmui-page-configure-authenticators", H.page_manage_devices = "xmui-page-manage-devices", H.page_select_device_to_manage = "xmui-page-select-managed-device", H.page_select_authenticator = "xmui-page-select-authenticator", H.page_dynamic_form = "xmui-page-dynamic-form", H.page_security_questions_auth = "xmui-page-security-questions-auth", H.page_security_questions_reg = "xmui-page-security-questions-reg"; var Q, K = "xmui-dialog-content", V = function (t) { function n() { var t; return e(this, n), (t = u(this, a(n).call(this))).className = K, t.ariaRole = "dialog", t.ariaLabeledBy = "".concat(K, "_title"), t.ariaDescribedBy = "".concat(K, "_message"), t.createContent(), t } return s(n, P), i(n, [{ key: "setDialogTitle", value: function (t) { this.titleComp.setText(t) } }, { key: "setDialogMessage", value: function (t) { this.messageComp.setText(t) } }, { key: "setDialogIconClass", value: function (t) { this.iconComp.className = "".concat(K, "_icon ").concat(t) } }, { key: "createContent", value: function () { this.iconComp = new P, this.iconComp.className = "".concat(K, "_icon"), this.titleComp = new E, this.titleComp.className = "".concat(K, "_title"), this.titleComp.automationId = H.dialog_title, this.messageComp = new E, this.messageComp.className = "".concat(K, "_message"), this.messageComp.automationId = H.dialog_message, this.appendChildren(this.iconComp, this.titleComp, this.messageComp) } }]), n }(), z = function (t) { function n(t, i) { var o; return e(this, n), (o = u(this, a(n).call(this, t, i))).handleClick = o.handleClick.bind(c(o)), o.dialogContent = new V, o.setContent(o.dialogContent), o } return s(n, U), i(n, [{ key: "addLeftButton", value: function (t) { t.onClick(this.handleClick), _(a(n.prototype), "addLeftButton", this).call(this, t) } }, { key: "addRightButton", value: function (t) { t.onClick(this.handleClick), _(a(n.prototype), "addRightButton", this).call(this, t) } }, { key: "setDialogTitle", value: function (t) { this.dialogContent.setDialogTitle(t) } }, { key: "setDialogMessage", value: function (t) { this.dialogContent.setDialogMessage(t) } }, { key: "setDialogIconClass", value: function (t) { this.dialogContent.setDialogIconClass(t) } }, { key: "onSelect", value: function (t) { this.onSelectCB = t } }, { key: "handleClick", value: function (t) { this.onSelectCB(t.value) } }]), n }(), W = { ts_gen_back: "ts_gen_back", ts_gen_skip: "ts_gen_skip", ts_gen_continue: "ts_gen_continue", ts_gen_cancel: "ts_gen_cancel", ts_gen_close: "ts_gen_close", ts_gen_ok: "ts_gen_ok", ts_gen_default: "ts_gen_default", ts_gen_restart: "ts_gen_restart", ts_gen_expired: "ts_gen_expired", ts_gen_cancel_authentication: "ts_gen_cancel_authentication", ts_gen_change_authenticator: "ts_gen_change_authenticator", ts_gen_select_authenticator: "ts_gen_select_authenticator", ts_gen_retry_authenticator: "ts_gen_retry_authenticator", ts_gen_dismiss: "ts_gen_dismiss", ts_authenticator_device_biometrics: "ts_authenticator_device_biometrics", ts_authenticator_password: "ts_authenticator_password", ts_authenticator_pin: "ts_authenticator_pin", ts_authenticator_pattern: "ts_authenticator_pattern", ts_authenticator_otp: "ts_authenticator_otp", ts_authenticator_fingerprint: "ts_authenticator_fingerprint", ts_authenticator_question: "ts_authenticator_question", ts_authenticator_face_id: "ts_authenticator_face_id", ts_authenticator_touch_id: "ts_authenticator_touch_id", ts_authenticator_totp: "ts_authenticator_totp", ts_authenticator_pattern_centralized: "ts_authenticator_pattern_centralized", ts_authenticator_pin_centralized: "ts_authenticator_pin_centralized", ts_authenticator_voice_server: "ts_authenticator_voice_server", ts_authenticator_fido2: "ts_authenticator_fido2", ts_authenticator_mobile_approve: "ts_authenticator_mobile_approve", ts_authenticator_face_server: "ts_authenticator_face_server", ts_authenticator_fido_fidopin: "ts_authenticator_fido_fidopin", ts_authenticator_fido_fidoface: "ts_authenticator_fido_fidoface", ts_authenticator_fido_fidofp: "ts_authenticator_fido_fidofp", ts_authenticator_device_biometrics_description: "ts_authenticator_device_biometrics_description", ts_authenticator_password_description: "ts_authenticator_password_description", ts_authenticator_pin_description: "ts_authenticator_pin_description", ts_authenticator_pin_centralized_description: "ts_authenticator_pin_centralized_description", ts_authenticator_pattern_description: "ts_authenticator_pattern_description", ts_authenticator_pattern_centralized_description: "ts_authenticator_pattern_centralized_description", ts_authenticator_otp_description: "ts_authenticator_otp_description", ts_authenticator_voice_description: "ts_authenticator_voice_description", ts_authenticator_voice_server_description: "ts_authenticator_voice_server_description", ts_authenticator_questions_description: "ts_authenticator_questions_description", ts_authenticator_face_description: "ts_authenticator_face_description", ts_authenticator_fingerprint_description: "ts_authenticator_fingerprint_description", ts_authenticator_face_id_description: "ts_authenticator_face_id_description", ts_authenticator_touch_id_description: "ts_authenticator_touch_id_description", ts_authenticator_totp_description: "ts_authenticator_totp_description", ts_authenticator_mobile_approve_description: "ts_authenticator_mobile_approve_description", ts_authenticator_fido2_description: "ts_authenticator_fido2_description", ts_authenticator_password_title_auth: "ts_authenticator_password_title_auth", ts_authenticator_password_title_reg: "ts_authenticator_password_title_reg", ts_authenticator_password_intro_auth: "ts_authenticator_password_intro_auth", ts_authenticator_password_intro_reg: "ts_authenticator_password_intro_reg", ts_authenticator_password_field_hint: "ts_authenticator_password_field_hint", ts_authenticator_password_reg_field_hint: "ts_authenticator_password_reg_field_hint", ts_authenticator_password_cta_positive: "ts_authenticator_password_cta_positive", ts_authenticator_password_error_too_short: "ts_authenticator_password_error_too_short", ts_authenticator_password_error_reg_no_match: "ts_authenticator_password_error_reg_no_match", ts_authenticator_password_error_reg_strength_validation_failed: "ts_authenticator_password_error_reg_strength_validation_failed", ts_authenticator_pin_title_auth: "ts_authenticator_pin_title_auth", ts_authenticator_pin_title_reg: "ts_authenticator_pin_title_reg", ts_authenticator_pin_intro_auth: "ts_authenticator_pin_intro_auth", ts_authenticator_pin_intro_reg: "ts_authenticator_pin_intro_reg", ts_authenticator_pin_intro_repeat: "ts_authenticator_pin_intro_repeat", ts_authenticator_pin_error_reg_no_match: "ts_authenticator_pin_error_reg_no_match", ts_authenticator_pin_code_length: "ts_authenticator_pin_code_length", ts_authenticator_otp_title_auth: "ts_authenticator_otp_title_auth", ts_authenticator_otp_qr_title: "ts_authenticator_otp_qr_title", ts_authenticator_otp_targets_intro: "ts_authenticator_otp_targets_intro", ts_authenticator_otp_sms_title: "ts_authenticator_otp_sms_title", ts_authenticator_otp_email_title: "ts_authenticator_otp_email_title", ts_authenticator_otp_voice_title: "ts_authenticator_otp_voice_title", ts_authenticator_otp_push_title: "ts_authenticator_otp_push_title", ts_authenticator_otp_unknown_title: "ts_authenticator_otp_unknown_title", ts_authenticator_otp_sms_sent: "ts_authenticator_otp_sms_sent", ts_authenticator_otp_email_sent: "ts_authenticator_otp_email_sent", ts_authenticator_otp_push_sent: "ts_authenticator_otp_push_sent", ts_authenticator_otp_voice_sent: "ts_authenticator_otp_voice_sent", ts_authenticator_otp_qr_sent: "ts_authenticator_otp_qr_sent", ts_authenticator_otp_external_numeric_sent: "ts_authenticator_otp_external_numeric_sent", ts_authenticator_otp_external_qr_sent: "ts_authenticator_otp_external_qr_sent", ts_authenticator_otp_resend: "ts_authenticator_otp_resend", ts_authenticator_otp_resend_message: "ts_authenticator_otp_resend_message", ts_authenticator_otp_resend_intro: "ts_authenticator_otp_resend_intro", ts_authenticator_otp_error_qr_permission: "ts_authenticator_otp_error_qr_permission", ts_authenticator_otp_error_code_expired: "ts_authenticator_otp_error_code_expired", ts_authenticator_otp_code_length: "ts_authenticator_otp_code_length", ts_authenticator_pattern_title_auth: "ts_authenticator_pattern_title_auth", ts_authenticator_pattern_title_reg: "ts_authenticator_pattern_title_reg", ts_authenticator_pattern_intro_auth: "ts_authenticator_pattern_intro_auth", ts_authenticator_pattern_intro_reg: "ts_authenticator_pattern_intro_reg", ts_authenticator_pattern_mismatch: "ts_authenticator_pattern_mismatch", ts_authenticator_pattern_error_min_points: "ts_authenticator_pattern_error_min_points", ts_authenticator_pattern_intro_repeat: "ts_authenticator_pattern_intro_repeat", ts_authenticator_pattern_cta_reset: "ts_authenticator_pattern_cta_reset", ts_authenticator_fingerprint_title_auth: "ts_authenticator_fingerprint_title_auth", ts_authenticator_fingerprint_title_reg: "ts_authenticator_fingerprint_title_reg", ts_authenticator_fingerprint_status_hint: "ts_authenticator_fingerprint_status_hint", ts_authenticator_faceid_title_auth: "ts_authenticator_faceid_title_auth", ts_authenticator_faceid_title_reg: "ts_authenticator_faceid_title_reg", ts_authenticator_touchid_title_reg: "ts_authenticator_touchid_title_reg", ts_authenticator_touchid_title_auth: "ts_authenticator_touchid_title_auth", ts_authenticator_device_biometrics_title_auth: "ts_authenticator_device_biometrics_title_auth", ts_authenticator_device_biometrics_title_reg: "ts_authenticator_device_biometrics_title_reg", ts_authenticator_device_biometrics_intro_auth: "ts_authenticator_device_biometrics_intro_auth", ts_authenticator_device_biometrics_intro_reg: "ts_authenticator_device_biometrics_intro_reg", ts_authenticator_device_biometrics_prompt: "ts_authenticator_device_biometrics_prompt", ts_authenticator_device_biometrics_cancel_cta: "ts_authenticator_device_biometrics_cancel_cta", ts_authenticator_questions_title_auth: "ts_authenticator_questions_title_auth", ts_authenticator_questions_title_reg: "ts_authenticator_questions_title_reg", ts_authenticator_questions_intro_auth: "ts_authenticator_questions_intro_auth", ts_authenticator_questions_intro_reg: "ts_authenticator_questions_intro_reg", ts_authenticator_questions_left: "ts_authenticator_questions_left", ts_authenticator_questions_error_answer_empty: "ts_authenticator_questions_error_answer_empty", ts_authenticator_voice_title_auth: "ts_authenticator_voice_title_auth", ts_authenticator_voice_title_reg: "ts_authenticator_voice_title_reg", ts_authenticator_voice_intro_auth: "ts_authenticator_voice_intro_auth", ts_authenticator_voice_intro_reg: "ts_authenticator_voice_intro_reg", ts_authenticator_voice_passphrase: "ts_authenticator_voice_passphrase", ts_authenticator_voice_passphrase_subtitle: "ts_authenticator_voice_passphrase_subtitle", ts_authenticator_voice_instructions: "ts_authenticator_voice_instructions", ts_authenticator_voice_record_start: "ts_authenticator_voice_record_start", ts_authenticator_voice_record_stop: "ts_authenticator_voice_record_stop", ts_authenticator_voice_request_audio_permission: "ts_authenticator_voice_request_audio_permission", ts_authenticator_voice_error_too_long: "ts_authenticator_voice_error_too_long", ts_authenticator_voice_error_too_short: "ts_authenticator_voice_error_too_short", ts_authenticator_voice_error_too_loud: "ts_authenticator_voice_error_too_loud", ts_authenticator_voice_error_too_weak: "ts_authenticator_voice_error_too_weak", ts_authenticator_voice_error_too_noisy: "ts_authenticator_voice_error_too_noisy", ts_authenticator_voice_error_invalid: "ts_authenticator_voice_error_invalid", ts_authenticator_face_title_auth: "ts_authenticator_face_title_auth", ts_authenticator_face_title_reg: "ts_authenticator_face_title_reg", ts_authenticator_face_intro_auth: "ts_authenticator_face_intro_auth", ts_authenticator_face_intro_reg: "ts_authenticator_face_intro_reg", ts_authenticator_face_error_invalid: "ts_authenticator_face_error_invalid", ts_authenticator_totp_title: "ts_authenticator_totp_title", ts_authenticator_totp_targets_intro: "ts_authenticator_totp_targets_intro", ts_authenticator_totp_input_intro: "ts_authenticator_totp_input_intro", ts_authenticator_totp_input_with_challenge_intro: "ts_authenticator_totp_input_with_challenge_intro", ts_authenticator_totp_input_with_qr_challenge_intro: "ts_authenticator_totp_input_with_qr_challenge_intro", ts_authenticator_totp_qrcode_challenge_step1_message: "ts_authenticator_totp_qrcode_challenge_step1_message", ts_authenticator_totp_qrcode_challenge_step2_message: "ts_authenticator_totp_qrcode_challenge_step2_message", ts_authenticator_totp_code_challenge_step1_message: "ts_authenticator_totp_code_challenge_step1_message", ts_authenticator_totp_code_challenge_step2_message: "ts_authenticator_totp_code_challenge_step2_message", ts_authenticator_totp_input_hint: "ts_authenticator_totp_input_hint", ts_authenticator_totp_targets_recently_used: "ts_authenticator_totp_targets_recently_used", ts_authenticator_totp_targets_current_device: "ts_authenticator_totp_targets_current_device", ts_authenticator_mobile_approve_title: "ts_authenticator_mobile_approve_title", ts_authenticator_mobile_approve_fetching_data: "ts_authenticator_mobile_approve_fetching_data", ts_authenticator_mobile_approve_send: "ts_authenticator_mobile_approve_send", ts_authenticator_mobile_approve_send_to_all: "ts_authenticator_mobile_approve_send_to_all", ts_authenticator_mobile_approve_targets_intro: "ts_authenticator_mobile_approve_targets_intro", ts_authenticator_mobile_approve_targets_recently_used: "ts_authenticator_mobile_approve_targets_recently_used", ts_authenticator_mobile_approve_targets_current_device: "ts_authenticator_mobile_approve_targets_current_device", ts_authenticator_mobile_approve_resend_message: "ts_authenticator_mobile_approve_resend_message", ts_authenticator_mobile_approve_resend_cta: "ts_authenticator_mobile_approve_resend_cta", ts_session_config_title: "ts_session_config_title", ts_session_config_intro: "ts_session_config_intro", ts_session_config_item_action_register: "ts_session_config_item_action_register", ts_session_config_item_action_unregister: "ts_session_config_item_action_unregister", ts_session_config_item_action_reregister: "ts_session_config_item_action_reregister", ts_session_config_item_action_set_as_default: "ts_session_config_item_action_set_as_default", ts_session_config_item_register_result: "ts_session_config_item_register_result", ts_session_config_item_reregister_result: "ts_session_config_item_reregister_result", ts_session_config_item_unregister_result: "ts_session_config_item_unregister_result", ts_session_config_item_default_result: "ts_session_config_item_default_result", ts_session_config_item_register_failed: "ts_session_config_item_register_failed", ts_session_config_item_reregister_failed: "ts_session_config_item_reregister_failed", ts_session_config_item_unregister_failed: "ts_session_config_item_unregister_failed", ts_session_config_item_default_failed: "ts_session_config_item_default_failed", ts_session_config_item_unregister_dialog_title: "ts_session_config_item_unregister_dialog_title", ts_session_config_item_unregister_dialog_message: "ts_session_config_item_unregister_dialog_message", ts_session_config_item_unregister_dialog_cta: "ts_session_config_item_unregister_dialog_cta", ts_session_config_error_dialog_title: "ts_session_config_error_dialog_title", ts_session_totp_title: "ts_session_totp_title", ts_session_totp_content: "ts_session_totp_content", ts_session_totp_unbound_title: "ts_session_totp_unbound_title", ts_session_totp_unbound_content: "ts_session_totp_unbound_content", ts_session_totp_unbound_code: "ts_session_totp_unbound_code", ts_session_totp_nottl_content: "ts_session_totp_nottl_content", ts_session_totp_provision_sa_title: "ts_session_totp_provision_sa_title", ts_session_totp_provision_password_title: "ts_session_totp_provision_password_title", ts_session_totp_provision_pattern_title: "ts_session_totp_provision_pattern_title", ts_session_totp_provision_pin_title: "ts_session_totp_provision_pin_title", ts_session_totp_generation_sa_title: "ts_session_totp_generation_sa_title", ts_session_totp_generation_password_title: "ts_session_totp_generation_password_title", ts_session_totp_generation_pattern_title: "ts_session_totp_generation_pattern_title", ts_session_totp_generation_pin_title: "ts_session_totp_generation_pin_title", ts_session_totp_generation_fingerprint_title: "ts_session_totp_generation_fingerprint_title", ts_session_totp_generation_device_biometrics_title: "ts_session_totp_generation_device_biometrics_title", ts_session_totp_challenge_title_list: "ts_session_totp_challenge_title_list", ts_session_totp_challenge_intro_list: "ts_session_totp_challenge_intro_list", ts_session_totp_challenge_title_textual: "ts_session_totp_challenge_title_textual", ts_session_totp_challenge_intro_textual: "ts_session_totp_challenge_intro_textual", ts_session_totp_challenge_title_qr: "ts_session_totp_challenge_title_qr", ts_session_totp_challenge_intro_qr: "ts_session_totp_challenge_intro_qr", ts_session_approval_approve: "ts_session_approval_approve", ts_session_approval_deny: "ts_session_approval_deny", ts_session_approval_completed_title: "ts_session_approval_completed_title", ts_session_approval_completed_subtitle: "ts_session_approval_completed_subtitle", ts_session_approval_completed_denied_subtitle: "ts_session_approval_completed_denied_subtitle", ts_session_approval_dialog_title: "ts_session_approval_dialog_title", ts_session_approval_dialog_message: "ts_session_approval_dialog_message", ts_session_approval_dialog_cta: "ts_session_approval_dialog_cta", ts_session_approval_approve_failed: "ts_session_approval_approve_failed", ts_session_approval_deny_failed: "ts_session_approval_deny_failed", ts_session_dm_title: "ts_session_dm_title", ts_session_dm_intro: "ts_session_dm_intro", ts_session_dm_section_current: "ts_session_dm_section_current", ts_session_dm_section_others: "ts_session_dm_section_others", ts_session_dm_last_used_date: "ts_session_dm_last_used_date", ts_session_dm_last_used_location: "ts_session_dm_last_used_location", ts_session_dm_added_at: "ts_session_dm_added_at", ts_session_dm_details_title: "ts_session_dm_details_title", ts_session_dm_details_subtitle: "ts_session_dm_details_subtitle", ts_session_dm_details_current_device: "ts_session_dm_details_current_device", ts_session_dm_details_push_title: "ts_session_dm_details_push_title", ts_session_dm_details_push_subtitle: "ts_session_dm_details_push_subtitle", ts_session_dm_details_push_action: "ts_session_dm_details_push_action", ts_session_dm_details_rename_action: "ts_session_dm_details_rename_action", ts_session_dm_details_remove_subtitle: "ts_session_dm_details_remove_subtitle", ts_session_dm_details_remove_action: "ts_session_dm_details_remove_action", ts_session_dm_details_no_other_devices_available: "ts_session_dm_details_no_other_devices_available", ts_session_dm_item_action_dialog_remove_title: "ts_session_dm_item_action_dialog_remove_title", ts_session_dm_item_action_dialog_remove_message: "ts_session_dm_item_action_dialog_remove_message", ts_session_dm_item_action_dialog_remove_cta: "ts_session_dm_item_action_dialog_remove_cta", ts_session_dm_item_action_dialog_rename_title: "ts_session_dm_item_action_dialog_rename_title", ts_session_dm_item_action_dialog_rename_cta: "ts_session_dm_item_action_dialog_rename_cta", ts_session_dm_details_rename_input_hint: "ts_session_dm_details_rename_input_hint", ts_session_dm_item_action_rename_result_positive: "ts_session_dm_item_action_rename_result_positive", ts_session_dm_item_action_rename_result_negative: "ts_session_dm_item_action_rename_result_negative", ts_session_dm_item_action_remove_result_positive: "ts_session_dm_item_action_remove_result_positive", ts_session_dm_item_action_remove_result_negative: "ts_session_dm_item_action_remove_result_negative", ts_session_dm_item_action_identify_result_positive: "ts_session_dm_item_action_identify_result_positive", ts_session_dm_item_action_identify_result_negative: "ts_session_dm_item_action_identify_result_negative", ts_session_dm_error_dialog_title: "ts_session_dm_error_dialog_title", ts_session_promotion_title: "ts_session_promotion_title", ts_session_promotion_intro: "ts_session_promotion_intro", ts_session_promotion_skip: "ts_session_promotion_skip", ts_session_promotion_abort: "ts_session_promotion_abort", ts_promise_sa_title: "ts_promise_sa_title", ts_promise_sa_content: "ts_promise_sa_content", ts_promise_co_title_auth: "ts_promise_co_title_auth", ts_promise_co_title_reg: "ts_promise_co_title_reg", ts_promise_fallback_title: "ts_promise_fallback_title", ts_promise_fallback_content: "ts_promise_fallback_content", ts_promise_fallback_action_fallback: "ts_promise_fallback_action_fallback", ts_promise_fallback_action_menu: "ts_promise_fallback_action_menu", ts_promise_fallback_action_retry: "ts_promise_fallback_action_retry", ts_promise_fallback_action_cancel: "ts_promise_fallback_action_cancel", ts_promise_co_content: "ts_promise_co_content", ts_promise_co_abort: "ts_promise_co_abort", ts_promise_co_select: "ts_promise_co_select", ts_promise_co_change: "ts_promise_co_change", ts_promise_co_retry: "ts_promise_co_retry", ts_promise_error_default_title_auth: "ts_promise_error_default_title_auth", ts_promise_error_default_title_reg: "ts_promise_error_default_title_reg", ts_promise_error_default_content_auth: "ts_promise_error_default_content_auth", ts_promise_error_default_content_reg: "ts_promise_error_default_content_reg", ts_promise_error_lock_title: "ts_promise_error_lock_title", ts_promise_error_lock_content: "ts_promise_error_lock_content", ts_promise_invalid_authenticator_title: "ts_promise_invalid_authenticator_title", ts_promise_invalid_authenticator_content: "ts_promise_invalid_authenticator_content", ts_promise_invalid_authenticator_cta: "ts_promise_invalid_authenticator_cta", ts_promise_rejection_policy_title: "ts_promise_rejection_policy_title", ts_promise_rejection_policy_content: "ts_promise_rejection_policy_content", ts_promise_rejection_policy_cta: "ts_promise_rejection_policy_cta", ts_promise_rejection_locked_user_title: "ts_promise_rejection_locked_user_title", ts_promise_rejection_locked_user_content: "ts_promise_rejection_locked_user_content", ts_promise_rejection_locked_user_cta: "ts_promise_rejection_locked_user_cta", ts_promise_rejection_locked_device_title: "ts_promise_rejection_locked_device_title", ts_promise_rejection_locked_device_content: "ts_promise_rejection_locked_device_content", ts_promise_rejection_locked_device_cta: "ts_promise_rejection_locked_device_cta", ts_promise_rejection_locked_application_title: "ts_promise_rejection_locked_application_title", ts_promise_rejection_locked_application_content: "ts_promise_rejection_locked_application_content", ts_promise_rejection_locked_application_cta: "ts_promise_rejection_locked_application_cta", ts_promise_rejection_approval_expired_title: "ts_promise_rejection_approval_expired_title", ts_promise_rejection_approval_expired_content: "ts_promise_rejection_approval_expired_content", ts_promise_rejection_approval_expired_cta: "ts_promise_rejection_approval_expired_cta", ts_session_authenticator_expired_title: "ts_session_authenticator_expired_title", ts_session_authenticator_expired_content: "ts_session_authenticator_expired_content", ts_promise_rejection_feature_not_supported_title: "ts_promise_rejection_feature_not_supported_title", ts_promise_rejection_feature_not_supported_content: "ts_promise_rejection_feature_not_supported_content", ts_promise_rejection_feature_not_supported_cta: "ts_promise_rejection_feature_not_supported_cta", ts_promise_rejection_cannot_consume_ticket_title: "ts_promise_rejection_cannot_consume_ticket_title", ts_promise_rejection_cannot_consume_ticket_content: "ts_promise_rejection_cannot_consume_ticket_content", ts_promise_rejection_cannot_consume_ticket_cta: "ts_promise_rejection_cannot_consume_ticket_cta", ts_promise_rejection_username_already_exists_title: "ts_promise_rejection_username_already_exists_title", ts_promise_rejection_username_already_exists_content: "ts_promise_rejection_username_already_exists_content", ts_promise_rejection_username_already_exists_cta: "ts_promise_rejection_username_already_exists_cta", ts_promise_rejection_authenticator_fatal_error_title: "ts_promise_rejection_authenticator_fatal_error_title", ts_promise_rejection_authenticator_fatal_error_content: "ts_promise_rejection_authenticator_fatal_error_content", ts_promise_rejection_authenticator_fatal_error_cta: "ts_promise_rejection_authenticator_fatal_error_cta", ts_accessibility_totp_reset: "ts_accessibility_totp_reset", ts_accessibility_totp_reader: "ts_accessibility_totp_reader", ts_accessibility_totp_no_ttl: "ts_accessibility_totp_no_ttl", ts_accessibility_configuration_cta_register: "ts_accessibility_configuration_cta_register", ts_accessibility_configuration_cta_unregister: "ts_accessibility_configuration_cta_unregister", ts_accessibility_configuration_cta_reregister: "ts_accessibility_configuration_cta_reregister", ts_accessibility_input_reader: "ts_accessibility_input_reader", ts_accessibility_input_pin_cell: "ts_accessibility_input_pin_cell", ts_accessibility_input_reset: "ts_accessibility_input_reset", ts_accessibility_authenticator_list_locked: "ts_accessibility_authenticator_list_locked", ts_accessibility_authenticator_list_disabled: "ts_accessibility_authenticator_list_disabled", ts_accessibility_authenticator_list_enabled: "ts_accessibility_authenticator_list_enabled", ts_accessibility_authenticator_list_default: "ts_accessibility_authenticator_list_default", ts_accessibility_hide_input_field: "ts_accessibility_hide_input_field", ts_accessibility_show_input_field: "ts_accessibility_show_input_field", ts_accessibility_back: "ts_accessibility_back", ts_accessibility_cancel: "ts_accessibility_cancel", ts_accessibility_password_enter_password: "ts_accessibility_password_enter_password", ts_accessibility_password_enter_password_again: "ts_accessibility_password_enter_password_again", ts_accessibility_password_error_reg_no_match: "ts_accessibility_password_error_reg_no_match", ts_plugin_dynamic_form_mandatory: "ts_plugin_dynamic_form_mandatory", ts_plugin_dynamic_form_error_mandatory: "ts_plugin_dynamic_form_error_mandatory", ts_plugin_dynamic_form_error_invalid: "ts_plugin_dynamic_form_error_invalid", ts_plugin_dynamic_form_error_too_long: "ts_plugin_dynamic_form_error_too_long", ts_plugin_dynamic_form_error_not_phone: "ts_plugin_dynamic_form_error_not_phone", ts_plugin_dynamic_form_error_not_email: "ts_plugin_dynamic_form_error_not_email", ts_plugin_dynamic_form_error_else: "ts_plugin_dynamic_form_error_else", ts_plugin_dynamic_form_table_title: "ts_plugin_dynamic_form_table_title", ts_plugin_dynamic_form_table_title_item: "ts_plugin_dynamic_form_table_title_item", ts_plugin_dynamic_form_error_general: "ts_plugin_dynamic_form_error_general", ts_plugin_dynamic_form_item_cta_positive: "ts_plugin_dynamic_form_item_cta_positive", ts_plugin_dynamic_form_item_cta_cancel: "ts_plugin_dynamic_form_item_cta_cancel", ts_plugin_dynamic_form_item_cta_select_all: "ts_plugin_dynamic_form_item_cta_select_all", ts_plugin_dynamic_form_item_cta_clear_all: "ts_plugin_dynamic_form_item_cta_clear_all", ts_session_scan_qr_title: "ts_session_scan_qr_title" }, Z = 0, Y = { generate: function () { return "".concat("xmui-id-").concat((new Date).getTime().toString(), "-").concat(++Z) } }, $ = "xmui-list-item", G = function (t) { function n(t, i) { var o; e(this, n), (o = u(this, a(n).call(this))).key = t, o.id = Y.generate(), o.className = $; var s = new P; return s.className = "".concat($, "_hover-indicator"), o.contentContainer = new P, o.contentContainer.className = "".concat($, "_content-container"), o.appendChildren(s, o.contentContainer), i && o.addCheckbox(), o.role = "option", o } return s(n, P), i(n, [{ key: "setContent", value: function (t) { this.contentContainer.setContent(t) } }, { key: "addCheckbox", value: function () { var t = new P; t.className = "".concat($, "_checkbox"), this.appendChild(t) } }]), n }(); !function (t) { t[t.Backspace = 8] = "Backspace", t[t.Tab = 9] = "Tab", t[t.Enter = 13] = "Enter", t[t.Shift = 16] = "Shift", t[t.Ctrl = 17] = "Ctrl", t[t.Alt = 18] = "Alt", t[t.Escape = 27] = "Escape", t[t.Space = 32] = "Space", t[t.PageUp = 33] = "PageUp", t[t.PageDown = 34] = "PageDown", t[t.End = 35] = "End", t[t.Home = 36] = "Home", t[t.LeftArrow = 37] = "LeftArrow", t[t.UpArrow = 38] = "UpArrow", t[t.RightArrow = 39] = "RightArrow", t[t.DownArrow = 40] = "DownArrow", t[t.Zero = 48] = "Zero", t[t.One = 49] = "One", t[t.Two = 50] = "Two", t[t.Three = 51] = "Three", t[t.Four = 52] = "Four", t[t.Five = 53] = "Five", t[t.Six = 54] = "Six", t[t.Seven = 55] = "Seven", t[t.Eight = 56] = "Eight", t[t.Nine = 57] = "Nine" }(Q || (Q = {})); var X, J = function () { function t(n) { e(this, t), this.container = n, this.container.ariaActiveDescendant = "", this.container.onKeydown(this.handleNavigation.bind(this)) } return i(t, [{ key: "onSelect", value: function (t) { this.selectCB = t } }, { key: "activateItem", value: function (t) { t && t !== this.activeItem && (this.deactivateItem(), this.activeItem = t, t.active = !0, this.container.ariaActiveDescendant = t.id, this.scrollToItem(t)) } }, { key: "deactivateItem", value: function (t) { var e = null == t || t === this.activeItem ? this.activeItem : null; e && (this.activeItem = null, e.active = !1, this.container.ariaActiveDescendant = "") } }, { key: "handleNavigation", value: function (t, e) { switch (e.keyCode) { case Q.DownArrow: this.handleDownArrow(), e.preventDefault(), e.stopPropagation(); break; case Q.UpArrow: this.handleUpArrow(), e.preventDefault(), e.stopPropagation(); break; case Q.Enter: case Q.Space: this.handleEnter(), e.stopPropagation() } } }, { key: "handleDownArrow", value: function () { var t = this.container.getNextChild(this.activeItem); this.activateItem(t) } }, { key: "handleUpArrow", value: function () { var t = this.container.getPrevChild(this.activeItem); this.activateItem(t) } }, { key: "handleEnter", value: function () { this.activeItem && this.selectCB && this.selectCB(this.activeItem) } }, { key: "scrollToItem", value: function (t) { var e = this.container.htmlElement, n = t.htmlElement; if (e.scrollHeight > e.clientHeight) { var i = e.clientHeight + e.scrollTop, o = n.offsetTop + n.offsetHeight; o > i ? e.scrollTop = o - e.clientHeight : n.offsetTop < e.scrollTop && (e.scrollTop = n.offsetTop) } } }]), t }(); !function (t) { t[t.None = 0] = "None", t[t.Single = 1] = "Single", t[t.SingleMouseup = 2] = "SingleMouseup", t[t.Multiple = 3] = "Multiple" }(X || (X = {})); var tt, et, nt, it = function (t) { function n() { var t, i = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : X.Single, o = arguments.length > 1 && void 0 !== arguments[1] && arguments[1]; return e(this, n), (t = u(this, a(n).call(this))).listSelectionMode = i, t.activateOnHover = o, t.selectionChangedCB = [], t.itemClickedCB = [], t.selectedItems = [], t.ariaMultiselectable = i === X.Multiple, t.handleItemClicked = t.handleItemClicked.bind(c(t)), t.handleMouseEvents = t.handleMouseEvents.bind(c(t)), t.handleItemMouseenter = t.handleItemMouseenter.bind(c(t)), t.handleItemMouseleave = t.handleItemMouseleave.bind(c(t)), t.keyboardNav = new J(c(t)), t.keyboardNav.onSelect((function (e) { e && !e.disabled && t.handleSelectionChanged(e) })), t.onMouseup(t.handleMouseEvents), t.onMousedown(t.handleMouseEvents), t.onClick(t.handleMouseEvents), t } return s(n, P), i(n, [{ key: "onSelectionChanged", value: function (t) { this.selectionChangedCB.push(t) } }, { key: "onItemClicked", value: function (t) { this.itemClickedCB.push(t) } }, { key: "clearSelection", value: function () { this.selectedItems.forEach((function (t) { t.selected = !1 })), this.selectedItems = [] } }, { key: "clearActive", value: function () { this.deactivateItem() } }, { key: "activateItem", value: function (t) { this.keyboardNav.activateItem(t) } }, { key: "deactivateItem", value: function (t) { this.keyboardNav.deactivateItem(t) } }, { key: "addItem", value: function (t) { this.selectionMode === X.SingleMouseup ? t.onMouseup(this.handleItemClicked) : t.onClick(this.handleItemClicked), this.activateOnHover && this.activateItemOnHover(t), this.appendChild(t) } }, { key: "activateItemOnHover", value: function (t) { t.onMouseenter(this.handleItemMouseenter), t.onMouseleave(this.handleItemMouseenter) } }, { key: "handleItemMouseenter", value: function (t) { this.activateItem(t) } }, { key: "handleItemMouseleave", value: function (t) { this.deactivateItem(t) } }, { key: "addToSelection", value: function (t) { t.selected = !0, -1 === this.selectedItems.indexOf(t) && (this.selectedItems.push(t), this.notifySelectionChanged()) } }, { key: "removeFromSelection", value: function (t) { t.selected = !1; var e = this.selectedItems.indexOf(t); e > -1 && (this.selectedItems.splice(e, 1), this.notifySelectionChanged()) } }, { key: "handleMouseEvents", value: function () { event.stopPropagation() } }, { key: "handleItemClicked", value: function (t) { !t.disabled && this.handleSelectionChanged(t), this.activateItem(t) } }, { key: "handleSelectionChanged", value: function (t) { switch (this.listSelectionMode) { case X.Multiple: this.handleMultipleSelectionChanged(t); break; case X.Single: case X.SingleMouseup: this.handleSingleSelectionChanged(t); break; case X.None: this.itemClickedCB.forEach((function (e) { e(t.key) })) } } }, { key: "handleMultipleSelectionChanged", value: function (t) { t.selected ? this.removeFromSelection(t) : this.addToSelection(t) } }, { key: "handleSingleSelectionChanged", value: function (t) { t.selected = !t.selected, this.clearSelection(), this.addToSelection(t) } }, { key: "notifySelectionChanged", value: function () { var t = this.selectedItems.map((function (t) { return t.key })); this.selectionChangedCB.forEach((function (e) { e(t) })) } }, { key: "selectionMode", get: function () { return this.listSelectionMode } }]), n }(), ot = "xmui-list", st = function (t) { function n() { var t, i = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : X.Single; return e(this, n), (t = u(this, a(n).call(this, i))).className = ot, t.role = "listbox", t.tabindex = 0, t } return s(n, it), i(n, [{ key: "addListItem", value: function (t, e, n) { var i = new G(t, this.selectionMode === X.Multiple); i.setContent(n), i.disabled = e, i.selected = !1, this.addItem(i) } }]), n }(), at = "xmui-list-item-content", rt = function (t) { function n(t) { var i, o = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, s = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null, r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null, c = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : null, l = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null; if (e(this, n), (i = u(this, a(n).call(this))).className = at, s) { var _ = new P; _.className = "".concat(at, "_icon ").concat(s), i.appendChild(_) } var h = new P; if (h.className = "".concat(at, "_text-container"), t) { var d = new E; d.setText(t), d.className = "".concat(at, "_title"); var p = new P; p.className = "".concat(at, "_title-container"), p.appendChild(d), l && l.forEach((function (t) { var e = new P; e.className = "".concat(at, "_icon-state ").concat(t), e.automationId = H.list_item_icon_state, p.appendChild(e) })), c && c.forEach((function (t) { p.appendChild(t) })), h.appendChild(p) } if (o) { var m = new E; m.setText(o), m.className = "".concat(at, "_info"), h.appendChild(m) } if (i.appendChild(h), r) { var g = new P; g.className = "".concat(at, "_space"), i.appendChild(g), i.appendChild(r) } return i } return s(n, P), n }(), ct = function () { function t() { e(this, t) } return i(t, null, [{ key: "getAuthenticatorIcon", value: function (t) { if (!tt) { var e, n = com.ts.mobile.sdk.AuthenticatorType; o(e = {}, n.Password, S.PasswordAuth), o(e, n.Pincode, S.PincodeAuth), o(e, n.Pattern, S.PatternAuth), o(e, n.Otp, S.OtpAuth), o(e, n.Voice, S.VoiceAuth), o(e, n.Questions, S.QuestionsAuth), o(e, n.Totp, S.TotpAuth), o(e, n.MobileApprove, S.MobileApproveAuth), o(e, n.Generic, S.GenericAuth), tt = e } return tt[t] } }, { key: "getChannelIcon", value: function (t) { if (!et) { var e, n = com.ts.mobile.sdk.OtpChannel; o(e = {}, n.Sms, S.SmsChannel), o(e, n.Email, S.EmailChannel), o(e, n.PushNotification, S.PushChannel), o(e, n.VoiceCall, S.VoiceChannel), et = e } return et[t] } }]), t }(); !function (t) { t.Button = "button", t.Submit = "submit" }(nt || (nt = {})); var ut, lt = "".concat("xmui-button", "--noraml"), _t = "".concat("xmui-button", "--alert"), ht = function (t) { function n(t) { var i, o = arguments.length > 1 && void 0 !== arguments[1] && arguments[1]; e(this, n), (i = u(this, a(n).call(this))).isAlertMode = o, i.automationId = t; var s = i.isAlertMode ? _t : lt; return i.addClass(s), i } return s(n, I), i(n, [{ key: "buildElement", value: function () { return x('<button class="'.concat("xmui-button", '"></button>')) } }, { key: "label", set: function (t) { this.element.text(t) } }, { key: "form", set: function (t) { this.attr = { form: t } } }, { key: "type", set: function (t) { this.attr = { type: t } } }, { key: "disabled", set: function (t) { d(a(n.prototype), "disabled", t, this, !0), this.htmlElement.disabled = t } }]), n }(), dt = function (t) { function n(t, i, o) { var s, r = !(arguments.length > 3 && void 0 !== arguments[3]) || arguments[3]; return e(this, n), (s = u(this, a(n).call(this, t, i))).actionContext = o, s.uiContext = o.getUiContext(), r && (s._cancelButton = new ht(H.button_cancel), s._cancelButton.label = s.uiContext.getString(W.ts_gen_cancel), s._cancelButton.onClick((function () { return s.handleCancelButtonClicked() })), s.addLeftButton(s.cancelButton)), s.addEscapeOptionButtons(o.getEscapeOptions()), s } return s(n, U), i(n, [{ key: "addEscapeOptionButtons", value: function (t) { var e = this; t.filter((function (t) { return t.getPresentation() === com.ts.mobile.sdk.ActionEscapeOptionPresentation.Action })).forEach((function (t) { var n = new ht(H.button_escape); n.label = t.getDisplayName(), n.onClick((function () { return e.handleEscapeButtonClicked(t) })), e.addLeftButton(n) })) } }, { key: "handleEscapeButtonClicked", value: function (t) { this.onEscapeCB && this.onEscapeCB(t) } }, { key: "onCancel", value: function (t) { this.onCancelCB = t } }, { key: "onEscape", value: function (t) { this.onEscapeCB = t } }, { key: "handleCancelButtonClicked", value: function () { var t = this.actionContext.getEscapeOptions().filter((function (t) { return t.getPresentation() === com.ts.mobile.sdk.ActionEscapeOptionPresentation.Cancel })); t.length ? this.onEscapeCB && this.onEscapeCB(t[0]) : this.onCancelCB && this.onCancelCB() } }, { key: "cancelButton", get: function () { return this._cancelButton } }]), n }(), pt = "xmui-select-authenticator", mt = function (t) { function n(t) { var i; e(this, n); var o = (i = u(this, a(n).call(this, H.page_select_authenticator, pt, t))).createContent(); return i.setContent(o), i } return s(n, dt), i(n, [{ key: "createContent", value: function () { var t = this; return this.authList = new st, this.authList.onSelectionChanged((function (e) { e.length && t.onSubmitCB && t.onSubmitCB(e[0]) })), this.authList.focus(), this.authList } }, { key: "addAuthenticator", value: function (t, e, n, i) { var o = ct.getAuthenticatorIcon(n) || ct.getAuthenticatorIcon(com.ts.mobile.sdk.AuthenticatorType.Generic), s = new rt(e, null, o, null, null, i ? [S.LockedState] : null); this.authList.addListItem(t, i, s) } }, { key: "onSubmit", value: function (t) { this.onSubmitCB = t } }]), n }(); !function (t) { t[t.Resume = -1] = "Resume", t[t.Continue = 0] = "Continue", t[t.Cancel = 1] = "Cancel" }(ut || (ut = {})); var gt, vt, ft, yt = function () { function t() { e(this, t) } return i(t, null, [{ key: "createContinueConfirmationInput", value: function () { return com.ts.mobile.sdk.ConfirmationInput.create(0) } }, { key: "createCancelConfirmationInput", value: function () { return com.ts.mobile.sdk.ConfirmationInput.create(1) } }, { key: "createResumeConfirmationInput", value: function () { return com.ts.mobile.sdk.ConfirmationInput.create(-1) } }, { key: "createCancelAuthenticatorRequest", value: function () { var t = com.ts.mobile.sdk.ControlRequest.create(com.ts.mobile.sdk.ControlRequestType.CancelAuthenticator); return com.ts.mobile.sdk.InputOrControlResponse.createControlResponse(t) } }, { key: "isContinueConfirmationInput", value: function (t) { return 0 === t } }, { key: "isResumeConfirmationInput", value: function (t) { return -1 === t } }, { key: "createTargetsSelectionResponse", value: function (t) { var e = com.ts.mobile.sdk.TargetBasedAuthenticatorInput.createTargetsSelectionRequest(t); return com.ts.mobile.sdk.InputOrControlResponse.createInputResponse(e) } }, { key: "createAbortControlResponse", value: function () { var t = com.ts.mobile.sdk.ControlRequest.create(com.ts.mobile.sdk.ControlRequestType.AbortAuthentication); return com.ts.mobile.sdk.InputOrControlResponse.createControlResponse(t) } }, { key: "getDeviceNameFromDeviceDetails", value: function (e) { var n = e.getAlias(); return t.getDeviceName(n, e) } }, { key: "getLastAccessedFromDeviceDetails", value: function (t, e) { var n = new Date(e.getLastAccessed()).toLocaleString(); return t.formatString(W.ts_authenticator_mobile_approve_targets_recently_used, [n]) } }, { key: "getDeviceName", value: function (t, e) { var n = e.getModel(), i = e.getOsType(), o = e.getOsVersion(); return t || "".concat(n, " ").concat(i, " ").concat(o) } }]), t }(), kt = "xmui-information-dialog-page", Ct = function (t) { function n(t, i) { var o; e(this, n), (o = u(this, a(n).call(this, H.dialog_information, kt))).automationId = H.dialog_information; var s = new ht(H.button_continue); return s.label = i || t.getString(W.ts_authenticator_password_cta_positive), s.value = !0, o.addRightButton(s), s.focus(), o } return s(n, z), n }(), bt = function () { function t() { e(this, t) } return i(t, null, [{ key: "getAuthenticatorNameKey", value: function (t) { return "".concat("ts_authenticator_").concat(t) } }, { key: "getAuthenticatorDescriptionKey", value: function (t) { return "question" == t && (t = "questions"), "".concat("ts_authenticator_").concat(t, "_description") } }]), t }(), wt = new (function () { function t() { e(this, t), this._isLogEnabled = !0 } return i(t, [{ key: "init", value: function () { this.lastPage = null, this.isBusy = !1, this.isLogEnabled = !0 } }, { key: "lastPage", set: function (t) { this._lastPage = t }, get: function () { return this._lastPage } }, { key: "isBusy", set: function (t) { this._isBusy = t }, get: function () { return this._isBusy } }, { key: "isLogEnabled", set: function (t) { this._isLogEnabled = t }, get: function () { return this._isLogEnabled } }]), t }()), xt = function (t) { function n() { var t; e(this, n), (t = u(this, a(n).call(this))).className = "xmui-busy-overlay"; var i = new P; return i.className = "xmui-busy-overlay_icon", t.appendChild(i), t } return s(n, P), n }(), St = function () { function t() { e(this, t) } return i(t, null, [{ key: "getContainer", value: function (t) { var e; t && t.uiContainer && (e = x(t.uiContainer)), null != e && 0 !== e.length || 0 === (e = x("#transmitContainer")).length && (e = x('<div                                             id="transmitContainer"                                             style="position: relative; width: 100%; height: 100%">'), x(document.documentElement).append(e)); var n = e.find("#xmui-main-container"); return 0 === n.length && (n = x('<div                                      id="xmui-main-container"                                      style="position:relative; width:100%; height:100%">'), e.content(n)), n } }, { key: "clearContainer", value: function (e) { wt.lastPage = null, t.getContainer(e).empty() } }, { key: "getUsernameFromClientContext", value: function (t) { return t && t.username } }, { key: "activityStarted", value: function (e) { if (wt.lastPage) wt.lastPage.busy = !0; else { t.clearContainer(e); var n = t.getContainer(e); (new xt).appendInto(n) } } }, { key: "activityEnded", value: function (e) { wt.lastPage ? wt.lastPage.busy = !1 : t.clearContainer(e) } }, { key: "setLogEnabled", value: function (t) { wt.isLogEnabled = t } }, { key: "log", value: function (t) { wt.isLogEnabled && console.log(t) } }, { key: "renderPage", value: function (e, n) { this.clearContainer(n), e.appendInto(t.getContainer(n)), wt.lastPage = e } }, { key: "presentUI", value: function (e, n) { this.clearContainer(n), t.getContainer(n).append(e), wt.lastPage = null } }, { key: "renderModal", value: function (e, n) { e.appendInto(t.getContainer(n)) } }, { key: "getControlActionButtonsInfo", value: function () { var t; gt || (o(t = {}, com.ts.mobile.sdk.ControlRequestType.ChangeMethod, { automationId: H.button_change_method, label: W.ts_promise_co_change, positionLeft: !1 }), o(t, com.ts.mobile.sdk.ControlRequestType.AbortAuthentication, { automationId: H.button_abort, label: W.ts_promise_co_abort, positionLeft: !0, isDefault: !0 }), o(t, com.ts.mobile.sdk.ControlRequestType.RetryAuthenticator, { automationId: H.button_retry, label: W.ts_promise_co_retry, positionLeft: !1 }), o(t, com.ts.mobile.sdk.ControlRequestType.SelectMethod, { automationId: H.button_select_method, label: W.ts_promise_co_select, positionLeft: !1 }), o(t, com.ts.mobile.sdk.ControlRequestType.CancelAuthenticator, { automationId: H.button_cancel, label: W.ts_gen_cancel, positionLeft: !1, isDefault: !0 }), gt = t); return gt } }, { key: "getRecoveryActionButtonsInfo", value: function () { var t; vt || (o(t = {}, com.ts.mobile.sdk.AuthenticationErrorRecovery.ChangeAuthenticator, { automationId: H.button_change_method, label: W.ts_promise_co_change, positionLeft: !1 }), o(t, com.ts.mobile.sdk.AuthenticationErrorRecovery.Fail, { automationId: H.button_abort, label: W.ts_promise_co_abort, positionLeft: !0, isDefault: !0 }), o(t, com.ts.mobile.sdk.AuthenticationErrorRecovery.RetryAuthenticator, { automationId: H.button_retry, label: W.ts_promise_co_retry, positionLeft: !1 }), o(t, com.ts.mobile.sdk.AuthenticationErrorRecovery.SelectAuthenticator, { automationId: H.button_select_method, label: W.ts_promise_co_select, positionLeft: !1 }), vt = t); return vt } }, { key: "getFallbackActionButtonsInfo", value: function () { var t; ft || (o(t = {}, com.ts.mobile.sdk.AuthenticatorFallbackAction.Fallback, { automationId: H.button_change_method, label: W.ts_promise_co_change, positionLeft: !1 }), o(t, com.ts.mobile.sdk.AuthenticatorFallbackAction.Cancel, { automationId: H.button_abort, label: W.ts_promise_co_abort, positionLeft: !0, isDefault: !0 }), o(t, com.ts.mobile.sdk.AuthenticatorFallbackAction.Retry, { automationId: H.button_retry, label: W.ts_promise_co_retry, positionLeft: !1 }), o(t, com.ts.mobile.sdk.AuthenticatorFallbackAction.AuthMenu, { automationId: H.button_select_method, label: W.ts_promise_co_select, positionLeft: !1 }), ft = t); return ft } }, { key: "buildDialogButtons", value: function (t, e, n, i) { n.forEach((function (n) { var o = i[n]; if (o) { var s = new ht(o.automationId); s.value = n.toString(), s.label = e.getString(o.label), o.positionLeft ? t.addLeftButton(s) : t.addRightButton(s) } })) } }, { key: "failureDataToPolicyRejectionDialogParams", value: function (t, e) { var n, i = null, o = e.getUiContext(); if (t && t.reason) { var s = t.reason; switch (s.type) { case "policy": i = { title: W.ts_promise_rejection_policy_title, text: W.ts_promise_rejection_policy_content, buttonText: W.ts_promise_rejection_policy_cta }; break; case "approval_expired": i = { title: W.ts_promise_rejection_approval_expired_title, text: W.ts_promise_rejection_approval_expired_content, buttonText: W.ts_promise_rejection_approval_expired_cta }; break; case "feature_not_supported": i = { title: W.ts_promise_rejection_feature_not_supported_title, text: W.ts_promise_rejection_feature_not_supported_content, buttonText: W.ts_promise_rejection_feature_not_supported_cta }; break; case "cannot_consume_ticket": i = { title: W.ts_promise_rejection_cannot_consume_ticket_title, text: W.ts_promise_rejection_cannot_consume_ticket_content, buttonText: W.ts_promise_rejection_cannot_consume_ticket_cta }; break; case "username_already_exists": n = [s.data && s.data.username], i = { title: W.ts_promise_rejection_username_already_exists_title, text: W.ts_promise_rejection_username_already_exists_content, buttonText: W.ts_promise_rejection_username_already_exists_cta }; break; case "locked": switch (s.data && s.data.lock_type) { case "user": i = { title: W.ts_promise_rejection_locked_user_title, text: W.ts_promise_rejection_locked_user_content, buttonText: W.ts_promise_rejection_locked_user_cta }; break; case "device": i = { title: W.ts_promise_rejection_locked_device_title, text: W.ts_promise_rejection_locked_device_content, buttonText: W.ts_promise_rejection_locked_device_cta }; break; case "application": i = { title: W.ts_promise_rejection_locked_application_title, text: W.ts_promise_rejection_locked_application_content, buttonText: W.ts_promise_rejection_locked_application_cta } } } } return i && (i.title = o.getString(i.title), i.text = n ? o.formatString(i.text, n) : o.getString(i.text), i.buttonText = o.getString(i.buttonText)), i } }]), t }(), It = function (t) { function n(t, i, o, s, r, c, l) { var _; return e(this, n), (_ = u(this, a(n).call(this, t, i, o, s))).dialogContent = new V, _.dialogContent.setDialogTitle(r), _.dialogContent.setDialogMessage(c), _.dialogContent.setDialogIconClass(l), _.setContent(_.dialogContent), _ } return s(n, dt), n }(), Et = "xmui-confirmation-action-dialog-page", At = function (t) { function n(t, i, o, s, r, c) { var l; return e(this, n), (l = u(this, a(n).call(this, H.dialog_confirm, Et, t, null != c, i, o, s))).continueButton = new ht(H.button_continue), l.continueButton.label = r, l.continueButton.onClick((function () { return l.onContinueCB && l.onContinueCB() })), l.addRightButton(l.continueButton), c && (l.cancelButton.label = c), l } return s(n, It), i(n, [{ key: "onContinue", value: function (t) { this.onContinueCB = t } }]), n }(), Pt = function () { function t() { e(this, t) } return i(t, null, [{ key: "promiseCancelAction", value: function (t, e, n, i, o) { var s = e.getUiContext(), a = t; t.indexOf(com.ts.mobile.sdk.ControlRequestType.ChangeMethod) >= 0 && t.indexOf(com.ts.mobile.sdk.ControlRequestType.SelectMethod) >= 0 && (a = t.filter((function (t) { return t != com.ts.mobile.sdk.ControlRequestType.ChangeMethod }))); var r = i === com.ts.mobile.sdk.AuthenticatorSessionMode.Authentication ? W.ts_promise_co_title_auth : W.ts_promise_co_title_reg; return new Promise((function (t, i) { var c = new z(H.dialog_cancellation, "xmui-cancellation-dialog-page"); c.automationId = H.dialog_cancellation, c.setUserName(o), c.setDialogTitle(s.getString(r)), c.setDialogMessage(s.getString(W.ts_promise_co_content)), c.setDialogIconClass(S.Cancellation), c.onSelect((function (e) { c.blockInteraction(), t(com.ts.mobile.sdk.ControlRequest.create(parseInt(e))) })); var u = St.getControlActionButtonsInfo(); St.buildDialogButtons(c, e.getUiContext(), a, u), St.renderPage(c, n) })) } }, { key: "promiseRecoveryForError", value: function (t, e, n, i, o, s, a) { var r = !1, c = t.getData(); c && c.additional_data && c.additional_data.locked && (r = !0); var u, l, _ = e; return e.indexOf(com.ts.mobile.sdk.AuthenticationErrorRecovery.ChangeAuthenticator) >= 0 && e.indexOf(com.ts.mobile.sdk.AuthenticationErrorRecovery.SelectAuthenticator) >= 0 && (_ = e.filter((function (t) { return t != com.ts.mobile.sdk.AuthenticationErrorRecovery.ChangeAuthenticator }))), r ? (u = W.ts_promise_error_lock_title, l = i.getString(W.ts_promise_error_lock_content)) : s === com.ts.mobile.sdk.AuthenticatorSessionMode.Authentication ? (u = W.ts_promise_error_default_title_auth, l = i.formatString(W.ts_promise_error_default_content_auth, [t.getMessage()])) : (u = W.ts_promise_error_default_title_reg, l = i.formatString(W.ts_promise_error_default_content_reg, [t.getMessage()])), this.createRecoveryFromErrorDialog(a, i.getString(u), l, r ? S.AuthLocked : S.Error, i, o, _) } }, { key: "createRecoveryFromErrorDialog", value: function (t, e, n, i, o, s, a) { return new Promise((function (n, r) { var c = new z(H.dialog_recovery, "xmui-error-recovery-dialog-page"); c.setUserName(t), c.setDialogTitle(e), c.setDialogMessage(o.getString(W.ts_promise_co_content)), c.setDialogIconClass(i), c.onSelect((function (t) { c.blockInteraction(), n(parseInt(t)) })); var u = St.getRecoveryActionButtonsInfo(); St.buildDialogButtons(c, o, a, u), St.renderPage(c, s) })) } }, { key: "promiseAuthenticator", value: function (t, e, n) { var i = e.getUiContext(); return new Promise((function (o, s) { var a = {}, r = new mt(e), c = St.getUsernameFromClientContext(n); c && r.setUserName(c), r.setTitle(i.getString(W.ts_promise_sa_title)), r.setInstructions(i.getString(W.ts_promise_sa_content)), t.forEach((function (t) { var e = t.getAuthenticator(), n = e.getAuthenticatorId(), o = e.getType(); a[n] = e; var s = !e.getEnabled() || e.getLocked() || !e.getRegistered(), c = i.getString(bt.getAuthenticatorNameKey(n)); r.addAuthenticator(n, c, o, s) })), r.onSubmit((function (t) { r.blockInteraction(), o(com.ts.mobile.sdk.AuthenticatorSelectionResult.createSelectionRequest(a[t])) })), r.onCancel((function () { r.blockInteraction(), o(com.ts.mobile.sdk.AuthenticatorSelectionResult.createAbortRequest()) })), r.onEscape((function (t) { r.blockInteraction(), o(com.ts.mobile.sdk.AuthenticatorSelectionResult.createEscapeRequest(t, {})) })), St.renderPage(r, n) })) } }, { key: "promiseInformationInput", value: function (t, e, n, i, o, s, a) { return new Promise((function (r, c) { var u = new Ct(s, o); t && u.setUserName(t), u.setDialogTitle(n), u.setDialogMessage(i), u.setDialogIconClass(e), u.onSelect((function () { u.blockInteraction(), r() })), St.renderPage(u, a) })) } }, { key: "internalPromiseConfirmationOrInformationActionInput", value: function (t, e, n, i, o, s, a, r, c) { return new Promise((function (u, l) { var _ = new At(r, n, i, e, o, a); t && _.setUserName(t), _.onContinue((function () { u(com.ts.mobile.sdk.ConfirmationInput.create(s)) })), _.onCancel((function () { u(yt.createCancelConfirmationInput()) })), _.onEscape((function (t) { u(com.ts.mobile.sdk.ConfirmationInput.createEscapeRequest(t, {})) })), St.renderPage(_, c) })) } }, { key: "promiseInformationActionInput", value: function (t, e, n, i, o, s, a) { return this.internalPromiseConfirmationOrInformationActionInput(t, e, n, i, o, -1, null, s, a) } }, { key: "promiseConfirmationActionInput", value: function (t, e, n, i, o, s, a, r) { return this.internalPromiseConfirmationOrInformationActionInput(t, e, n, i, o, 0, s, a, r) } }, { key: "promiseAuthenticatorFallbackAction", value: function (t, e, n, i, o, s) { return new Promise((function (n, a) { var r = o.getUiContext(), c = i.description.getAuthenticatorId(), u = r.getString(bt.getAuthenticatorNameKey(c)), l = new z(H.dialog_fallback, "xmui-auth-fallback-dialog-page"); t && l.setUserName(t), l.setDialogTitle(r.formatString(W.ts_promise_fallback_title, [u])), l.setDialogMessage(r.getString(W.ts_promise_fallback_content)), l.setDialogIconClass(S.Fallback), l.onSelect((function (t) { l.blockInteraction(), n(parseInt(t)) })); var _ = St.getFallbackActionButtonsInfo(); St.buildDialogButtons(l, r, e, _), St.renderPage(l, s) })) } }, { key: "promisePolicyRejectionInput", value: function (e, n, i, o, s, a) { var r = { title: e, text: n, buttonText: i }; if (!(e && n && i || (r = St.failureDataToPolicyRejectionDialogParams(o, s)))) return Promise.resolve(yt.createResumeConfirmationInput()); var c = o, u = c && c.reason && c.reason.data && c.reason.data.username || St.getUsernameFromClientContext(a); return t.promiseInformationInput(u, S.Rejection, r.title, r.text, r.buttonText, s.getUiContext(), a).then((function () { return yt.createResumeConfirmationInput() })) } }]), t }(), Tt = "xmui-confirmation-dialog-page", Rt = function (t) { function n(t, i, o) { var s, r = arguments.length > 3 && void 0 !== arguments[3] && arguments[3]; e(this, n), (s = u(this, a(n).call(this, H.dialog_confirm, Tt))).automationId = H.dialog_confirm; var c = new ht(H.button_cancel); c.label = o || t.getString(W.ts_gen_cancel), c.value = !1, s.addLeftButton(c); var l = new ht(H.button_continue); return l.label = i || t.getString(W.ts_authenticator_password_cta_positive), l.value = !0, s.addRightButton(l), r ? l.focus() : c.focus(), s } return s(n, z), n }(), Mt = function () { function t(n, i) { e(this, t), this.showExpirationDialog = !1, this.supportsInlineError = !1, this.title = n, this.username = i, this.authId = n } return i(t, [{ key: "startSession", value: function (t, e, n, i) { this.description = t, this.mode = e, this.actionContext = n, this.clientContext = i, this.uiContext = n.getUiContext(), this.username = St.getUsernameFromClientContext(i) || this.username, St.log("Starting session; session mode: [".concat(this.mode, "], authenticator: [").concat(this.title, "]")) } }, { key: "changeSessionModeToRegistrationAfterExpiration", value: function () { St.log("Changing session mode to registration after expiration; authenticator: [".concat(this.title, "]")), this.mode = com.ts.mobile.sdk.AuthenticatorSessionMode.Registration, this.authError = null, this.showExpirationDialog = !0 } }, { key: "promiseRecoveryForError", value: function (t, e, n) { return St.log("Starting error recovery; session mode: [".concat(this.mode, "], authenticator: [").concat(this.title, "], error: [").concat(t, "]")), this.supportsInlineError && n === com.ts.mobile.sdk.AuthenticationErrorRecovery.RetryAuthenticator ? (this.authError = t, Promise.resolve(n)) : n === com.ts.mobile.sdk.AuthenticationErrorRecovery.Fail ? Promise.resolve(n) : Pt.promiseRecoveryForError(t, e, n, this.uiContext, this.clientContext, this.mode, this.username) } }, { key: "endSession", value: function () { St.log("Ending session; session mode: [".concat(this.mode, "], authenticator: [").concat(this.title, "]")) } }, { key: "promiseInput", value: function () { var t = this; return new Promise((function (e, n) { switch (t.setInputResolver(e), t.mode) { case com.ts.mobile.sdk.AuthenticatorSessionMode.Authentication: St.log("Fetching authentication input; authenticator: [".concat(t.title, "]")), t.showAuthUi(); break; case com.ts.mobile.sdk.AuthenticatorSessionMode.Registration: St.log("Fetching registration input; authenticator: [".concat(t.title, "]")), t.showExpirationDialog ? (t.showExpirationDialog = !1, t.showRegUiAfterExpiration()) : t.showRegUi() } })).then((function (e) { return t.authError = null, e })) } }, { key: "promiseCancelAction", value: function (t) { return Pt.promiseCancelAction(t, this.actionContext, this.clientContext, this.mode, this.username) } }, { key: "showRegUiAfterExpiration", value: function () { var t = this, e = this.uiContext, n = e.getString(bt.getAuthenticatorNameKey(this.title)), i = new Rt(this.uiContext); i.setUserName(this.username), i.setDialogTitle(e.formatString(W.ts_session_authenticator_expired_title, [n])), i.setDialogIconClass(S.Expiration), i.setDialogMessage(e.getString(W.ts_session_authenticator_expired_content)), i.onSelect((function (e) { i.blockInteraction(), e ? t.showRegUi() : t.onCancel() })), St.renderPage(i, this.clientContext) } }, { key: "setInputResolver", value: function (t) { this.currentInputResolveFn = t } }, { key: "onCancel", value: function () { this.resolveInputPromise(yt.createCancelAuthenticatorRequest()) } }, { key: "onEscape", value: function (t) { var e = com.ts.mobile.sdk.InputOrControlResponse.createEscapeResponse(t, {}); this.resolveInputPromise(e) } }, { key: "resolveInputPromise", value: function (t) { if (this.currentInputResolveFn) { var e = this.currentInputResolveFn; this.currentInputResolveFn = null, e(t) } } }, { key: "showAuthenticatorPage", value: function (t) { var e = this; t.setUserName(this.username), t.onCancel((function () { t.blockInteraction(), e.onCancel() })), t.onEscape((function (n) { t.blockInteraction(), e.onEscape(n) })), St.renderPage(t, this.clientContext) } }]), t }(), Bt = function (t) { function n(t, i) { var o; return e(this, n), (o = u(this, a(n).call(this))).stateOnIcon = t, o.stateOffIcon = i, o.isOn = !1, o.setIconsClass(), o.onClick((function () { o.isOn = !o.isOn, o.setIconsClass(), o.onChangeCB && o.onChangeCB(o.isOn) })), o } return s(n, P), i(n, [{ key: "onChange", value: function (t) { this.onChangeCB = t } }, { key: "setIsOn", value: function (t) { this.isOn = t, this.setIconsClass() } }, { key: "setIconsClass", value: function () { var t = ""; t = this.isOn ? this.stateOnIcon : this.stateOffIcon, this.element.setClass("".concat("xmui-toggle-icon", " ").concat(t)) } }]), n }(); function Nt(t, e, n) { var i; return function () { var o = this, s = arguments, a = function () { i = null, n || t.apply(o, s) }, r = n && !i; clearTimeout(i), i = setTimeout(a, e), r && t.apply(o, s) } } var Dt, Lt = function (t) { function n(t) { var i; return e(this, n), (i = u(this, a(n).call(this))).automationId = t, i.inputHtmlElement = i.htmlElement, i } return s(n, I), i(n, [{ key: "buildElement", value: function () { return x("<input>") } }, { key: "onChange", value: function (t) { this.element.on("input", this.createCB(t)) } }, { key: "createCB", value: function (t) { return Nt(t, 100, !1) } }, { key: "name", set: function (t) { this.inputHtmlElement.name = t }, get: function () { return this.inputHtmlElement.name } }, { key: "type", set: function (t) { this.attr = { type: t } } }, { key: "placeholder", set: function (t) { this.inputHtmlElement.placeholder = t } }, { key: "maxlength", set: function (t) { this.attr = { maxlength: t.toString() } } }, { key: "autocomplete", set: function (t) { this.attr = { autocomplete: t } } }, { key: "autocorrect", set: function (t) { this.attr = { autocorrect: t ? "on" : "off" } } }, { key: "autocapitalize", set: function (t) { this.attr = { autocapitalize: t ? "on" : "off" } } }, { key: "value", set: function (t) { this.inputHtmlElement.value = t }, get: function () { return this.inputHtmlElement.value } }, { key: "disabled", set: function (t) { d(a(n.prototype), "disabled", t, this, !0), this.inputHtmlElement.disabled = t } }, { key: "required", set: function (t) { this.inputHtmlElement.required = t }, get: function () { return this.inputHtmlElement.required } }]), n }(), Ft = "xmui-form-field-message", qt = "".concat(Ft, "--center"), Ot = "".concat(Ft, "--error"), jt = function (t) { function n() { var t, i = arguments.length > 0 && void 0 !== arguments[0] && arguments[0], o = arguments.length > 1 && void 0 !== arguments[1] && arguments[1]; return e(this, n), (t = u(this, a(n).call(this))).id = Y.generate(), t.className = Ft, i && t.addClass(Ot), o && t.addClass(qt), t } return s(n, E), n }(), Ut = /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/, Ht = function () { function t() { e(this, t) } return i(t, null, [{ key: "email", value: function (t) { return Ut.test(t) ? void 0 : "Invalid Email" } }, { key: "required", value: function (t) { return t ? void 0 : "Required" } }, { key: "mobileNumber", value: function (t) { var e = t.match(/^([0-9]{1,3})-([1-9][0-9]+)$/); return e ? e[1].length + e[2].length > 15 ? "Mobile Number exceeded 15 digits" : void 0 : "Invalid Mobile Number" } }]), t }(), Qt = function () { function t() { e(this, t) } return i(t, null, [{ key: "positiveInteger", value: function (t) { var e = t.keyCode; (e !== Q.Enter && e < Q.Zero || e > Q.Nine) && t.preventDefault() } }]), t }(), Kt = function (t) { function n() { return e(this, n), u(this, a(n).apply(this, arguments)) } return s(n, P), n }(), Vt = "xmui-input-field", zt = /^[0-9]+$/, Wt = "".concat(Vt, "--has-value"), Zt = "".concat(Vt, "--has-focus"); !function (t) { t[t.Password = 0] = "Password", t[t.Text = 1] = "Text", t[t.Email = 2] = "Email", t[t.PositiveInteger = 3] = "PositiveInteger" }(Dt || (Dt = {})); var Yt, $t = function (t) { function n(t, i) { var o; e(this, n), (o = u(this, a(n).call(this))).inputType = t, o.hasValue = !1, o.validators = [], o.icons = new Map, o.className = Vt, o.inputComponent = new Lt(i), o.inputComponent.value = "", o.inputComponent.autocapitalize = !1, o.inputComponent.autocorrect = !1, o.inputComponent.spellcheck = !1, o.inputComponent.onPaste(o.handlePaste.bind(c(o))), o.inputComponent.onChange(o.handleChange.bind(c(o))); var s = new P; s.className = "".concat(Vt, "_row"); var r = new P; r.className = "".concat(Vt, "_container"); var l = new P; l.className = "".concat(Vt, "_input-and-label"); var _ = new P; _.className = "".concat(Vt, "_label-container"); var h = new E; switch (h.className = "".concat(Vt, "_label"), o.inputLabel = h, _.appendChild(o.inputLabel), l.appendChildren(o.inputComponent, _), r.appendChild(l), s.appendChildren(r), s.onFocusIn((function () { o.addClass(Zt) })), s.onFocusOut((function () { o.removeClass(Zt) })), t) { case Dt.Password: o.setupPasswordInput(r); break; case Dt.Text: o.inputComponent.type = "text"; break; case Dt.Email: o.setupEmailInput(); break; case Dt.PositiveInteger: o.setupPositiveIntegerInput() }return o.messageComp = new jt(!1), o.messageComp.show = !1, o.errorMessageComp = new jt(!0), o.appendChildren(s, o.messageComp, o.errorMessageComp), o.inputComponent.ariaDescribedBy = o.messageComp.id, o.container = r, o.inputRow = s, o } return s(n, Kt), i(n, [{ key: "addValidators", value: function (t) { this.validators = this.validators.concat(t) } }, { key: "addValidator", value: function (t) { this.validators.push(t) } }, { key: "focus", value: function () { this.inputComponent.focus() } }, { key: "onBlur", value: function (t) { this.inputComponent.onBlur(t) } }, { key: "onFocus", value: function (t) { this.inputComponent.onFocus(t) } }, { key: "onChange", value: function (t) { this.inputComponent.onChange(t) } }, { key: "validateAndSetErrorMessage", value: function () { var t = this, e = !0, n = this.value.trim(); return this.inputComponent.required ? [this.getRequiredValidator()].concat(p(this.validators)) : this.validators, !this.inputComponent.required && this.isEmpty || (e = !this.validators.some((function (e) { var i = e(n); return i && t.setError(i), !!i }))), e && this.clearError(), e } }, { key: "setError", value: function (t) { var e = arguments.length > 1 && void 0 !== arguments[1] && arguments[1]; this.error = !0, this.errorMessage = t || "", e && (this.value = "") } }, { key: "clearError", value: function () { this.error = !1, this.errorMessage = "" } }, { key: "getRequiredValidator", value: function () { return Ht.required } }, { key: "addIcon", value: function (t) { var e = new P; e.className = "".concat(Vt, "_icon ").concat(t), this.container.appendChild(e), this.icons.set(t, e) } }, { key: "removeIcon", value: function (t) { var e = this.icons.get(t); e && (this.container.removeChild(e), this.icons.delete(t)) } }, { key: "prependToInputRow", value: function (t) { this.inputRow.prependChild(t) } }, { key: "setupPasswordInput", value: function (t) { var e = this; this.inputComponent.type = "password"; var n = new Bt(S.PasswordVisible, S.PasswordHidden); n.setIsOn(!1), n.onChange((function (t) { e.inputComponent.type = t ? "text" : "password" })), t.appendChild(n) } }, { key: "setupPositiveIntegerInput", value: function () { this.inputComponent.type = "text", this.inputComponent.onKeypress((function (t, e) { return Qt.positiveInteger(e) })) } }, { key: "setupEmailInput", value: function () { this.inputComponent.type = "email", this.addValidator(Ht.email) } }, { key: "handlePaste", value: function (t) { var e; this.inputType == Dt.PositiveInteger && ((e = t.clipboardData && t.clipboardData.getData ? t.clipboardData.getData("text/plain") : window.clipboardData.getData("Text")) && !zt.test(e) && t.preventDefault()) } }, { key: "updateHasValue", value: function (t) { t ? this.addClass(Wt) : this.removeClass(Wt), this.hasValue = t } }, { key: "handleChange", value: function () { var t = this.checkHasValue(); this.hasValue !== t && this.updateHasValue(t) } }, { key: "checkHasValue", value: function () { return !!this.value.length } }, { key: "name", set: function (t) { this.inputComponent.name = t }, get: function () { return this.inputComponent.name } }, { key: "disabled", set: function (t) { this.inputComponent.disabled = t } }, { key: "message", set: function (t) { this.messageComp.setText(t), this.messageComp.show = !!t.length } }, { key: "value", set: function (t) { this.inputComponent.value = t, this.handleChange() }, get: function () { return this.inputComponent.value } }, { key: "type", get: function () { return this.inputType } }, { key: "ariaRole", set: function (t) { this.inputComponent.ariaRole = t } }, { key: "ariaLabel", set: function (t) { this.inputComponent.ariaLabel = t } }, { key: "automationId", set: function (t) { this.inputComponent.automationId = t } }, { key: "autocomplete", set: function (t) { this.inputComponent.autocomplete = t } }, { key: "placeholder", set: function (t) { this.placeholderText = t, this.inputLabel.setText(t) }, get: function () { return this.placeholderText } }, { key: "maxlength", set: function (t) { this.inputComponent.maxlength = t } }, { key: "required", set: function (t) { this.inputComponent.required = t }, get: function () { return this.inputComponent.required } }, { key: "isEmpty", get: function () { return !this.value.trim().length } }, { key: "errorMessage", set: function (t) { this.errorMessageComp.setText(t) } }]), n }(), Gt = "xmui-form", Xt = "".concat(Gt, "_hidden-submit-button"), Jt = function (t) { function n(t) { var i; if (e(this, n), (i = u(this, a(n).call(this))).submitButton = t, i.externalValidations = function () { return !0 }, i.className = Gt, i.submitButton) { var o = new ht(""); o.addClass(Xt), o.type = nt.Submit, o.disabled = !0, o.onClick((function () { return i.handleSubmit() })), i.appendChild(o), i.hiddenSubmitButton = o, i.submitButton && i.submitButton.onClick((function () { return i.handleSubmit() })) } return i.element.on("submit", (function () { return event.preventDefault() })), i.element.on("input", Nt(i.handleInputEvent.bind(c(i)), 100, !1)), i } return s(n, A), i(n, [{ key: "buildElement", value: function () { return x("<form novalidate></form>") } }, { key: "start", value: function () { this.updateSubmitButton() } }, { key: "onSubmit", value: function (t) { this.onSubmitCB = t } }, { key: "onUserInput", value: function (t) { this.onUserInputCB = t } }, { key: "handleSubmit", value: function () { this.validate() && this.onSubmitCB && this.onSubmitCB(this.buildFormResult()), this.updateSubmitButton() } }, { key: "updateSubmitButton", value: function () { if (this.submitButton) { var t = this.isMandatoryEmpty(); this.submitButton.disabled = this.hiddenSubmitButton.disabled = t } } }, { key: "isMandatoryEmpty", value: function () { return this.getFormFields(this).some((function (t) { return t.required && t.isEmpty })) } }, { key: "getFormFields", value: function (t) { var e = this, n = []; return t.getChildren().forEach((function (t) { t instanceof Kt ? n.push(t) : t instanceof A && (n = n.concat(e.getFormFields(t))) })), n } }, { key: "validate", value: function () { var t = this.getFormFields(this).reduce((function (t, e) { return e.validateAndSetErrorMessage() && t }), !0), e = this.externalValidations(); return t && e } }, { key: "buildFormResult", value: function () { return this.getFormFields(this).reduce((function (t, e) { return t[e.name] = "string" == typeof e.value ? e.value.trim() : e.value, t }), {}) } }, { key: "handleInputEvent", value: function () { this.updateSubmitButton(), this.onUserInputCB && this.onUserInputCB() } }, { key: "name", set: function (t) { this.attr = { name: t } } }]), n }(); !function (t) { t.Off = "off", t.Username = "username", t.NewPassword = "new-password", t.CurrentPassword = "current-password" }(Yt || (Yt = {})); var te, ee = function (t) { function n(t, i, o) { return e(this, n), u(this, a(n).call(this, t, i, o)) } return s(n, dt), n }(), ne = "xmui-password-authentication", ie = "xmui-password-registration", oe = function (t) { function n(t, i) { var o, s = arguments.length > 2 && void 0 !== arguments[2] && arguments[2]; e(this, n), (o = u(this, a(n).call(this, i ? H.page_password_reg : H.page_password_auth, i ? ie : ne, t))).isRegistrationMode = i, o.disableAutocomplete = s, o.passwordInputRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[a-zA-Z\d]{6,}$/, o.setTitle(o.getTitle()), o.setInstructions(o.getInstructions()); var r = new ht(H.button_continue); r.label = o.uiContext.getString(W.ts_authenticator_password_cta_positive), o.addRightButton(r), o.continueButton = r; var c = o.createForm(); return o.setContent(c), o } return s(n, ee), i(n, [{ key: "setError", value: function (t) { this.error = !0, this.passwordInput.setError(t) } }, { key: "clearError", value: function () { this.error = !1, this.passwordInput.clearError() } }, { key: "reset", value: function () { this.unblockInteraction(), this.passwordInput.value = "", this.passwordInput.focus(), this.repeatPasswordInput && (this.repeatPasswordInput.value = "") } }, { key: "onSubmit", value: function (t) { this.onSubmitCB = t } }, { key: "getTitle", value: function () { var t = this.isRegistrationMode ? W.ts_authenticator_password_title_reg : W.ts_authenticator_password_title_auth; return this.uiContext.getString(t) } }, { key: "getInstructions", value: function () { var t; return t = this.isRegistrationMode ? W.ts_authenticator_password_intro_reg : W.ts_authenticator_password_intro_auth, this.uiContext.getString(t) } }, { key: "createForm", value: function () { var t = this, e = this.uiContext, n = new Jt(this.continueButton); n.addClass("xmui-password-page-form"), n.id = "xmui-password-form"; var i = new $t(Dt.Password, H.input_password), o = this.getAutocompleteValue(); if (i.name = "password", i.placeholder = e.getString(W.ts_authenticator_password_field_hint), i.disabled = !1, i.value = "", i.required = !0, i.autocomplete = o, i.ariaLabel = e.getString(W.ts_accessibility_password_enter_password), i.focus(), this.passwordInput = i, n.appendChild(i), this.isRegistrationMode) { var s = new P; s.className = "".concat("xmui-password-page-form", "_spacer"), n.appendChild(s); var a = new $t(Dt.Password, H.input_repeat_password); a.name = "repeat-password", a.placeholder = e.getString(W.ts_authenticator_password_reg_field_hint), a.disabled = !1, a.value = "", a.required = !0, i.autocomplete = o, a.ariaLabel = e.getString(W.ts_accessibility_password_enter_password_again), this.repeatPasswordInput = a, n.appendChild(a) } return n.externalValidations = function () { var e = !0; return t.isRegistrationMode && (t.validatePasswordsMatch() || (t.repeatPasswordInput.setError(t.uiContext.getString(W.ts_authenticator_password_error_reg_no_match), !1), t.passwordInput.focus(), e = !1), t.isPasswordValid() || (t.passwordInput.setError(t.uiContext.getString(W.ts_authenticator_password_error_reg_strength_validation_failed), !1), t.repeatPasswordInput.setError(null, !0), t.passwordInput.focus(), e = !1), 0 == e && (t.passwordInput.value = "", t.repeatPasswordInput.value = "")), e }, n.onUserInput(this.handlePasswordChanged.bind(this)), n.onSubmit((function (e) { t.blockInteraction(), t.onSubmitCB && t.onSubmitCB(e.password) })), n.start(), n } }, { key: "validatePasswordsMatch", value: function () { return this.passwordInput.value === this.repeatPasswordInput.value } }, { key: "isPasswordValid", value: function () { return this.passwordInputRegex.test(this.passwordInput.value) } }, { key: "getAutocompleteValue", value: function () { return this.disableAutocomplete ? Yt.Off : this.isRegistrationMode ? Yt.NewPassword : Yt.CurrentPassword } }, { key: "handlePasswordChanged", value: function () { this.passwordInput.error && this.passwordInput.clearError(), this.repeatPasswordInput && this.repeatPasswordInput.error && this.repeatPasswordInput.clearError() } }]), n }(), se = function (t) { function n(t, i) { var o; return e(this, n), (o = u(this, a(n).call(this, t, i))).supportsInlineError = !0, o } return s(n, Mt), i(n, [{ key: "showAuthUi", value: function () { this.showPasswordPage(!1) } }, { key: "showRegUi", value: function () { this.showPasswordPage(!0) } }, { key: "showPasswordPage", value: function (t) { var e = this; if (this.authError && this.passwordPage) this.passwordPage.reset(), this.authError && this.passwordPage.setError(this.authError.getMessage()); else { var n = !0 === this.clientContext.disablePasswordAutocomplete, i = new oe(this.actionContext, t, n); this.showAuthenticatorPage(i), this.passwordPage = i } this.passwordPage.onSubmit((function (t) { var n = com.ts.mobile.sdk.PasswordInput.create(t); e.resolveInputPromise(com.ts.mobile.sdk.InputOrControlResponse.createInputResponse(n)) })) } }]), n }(), ae = "xmui-select-device-page", re = function (t) { function n(t) { var i; e(this, n), (i = u(this, a(n).call(this, H.page_select_device, ae, t))).selectedDevices = [], i.deviceKeys = []; var o = new ht(H.button_send_to_all); o.label = i.uiContext.getString(W.ts_authenticator_mobile_approve_send_to_all), o.onClick((function () { i.onSubmitCB && i.onSubmitCB(i.deviceKeys) })), i.addRightButton(o); var s = new ht(H.button_continue); s.label = i.uiContext.getString(W.ts_authenticator_password_cta_positive), s.disabled = !0, s.onClick((function () { i.onSubmitCB && i.onSubmitCB(i.selectedDevices) })), i.addRightButton(s), i.confirmButton = s; var r = i.createContent(); return i.setContent(r), i } return s(n, ee), i(n, [{ key: "createContent", value: function () { var t = this; return this.deviceList = new st(X.Multiple), this.deviceList.onSelectionChanged((function (e) { t.selectedDevices = e, t.confirmButton.disabled = 0 === e.length })), this.deviceList.focus(), this.deviceList } }, { key: "addDevice", value: function (t, e, n, i) { var o = new rt(e, n, S.Device); this.deviceList.addListItem(t, i, o), this.deviceKeys.push(t) } }, { key: "onSubmit", value: function (t) { this.onSubmitCB = t } }]), n }(), ce = function (t) { function n() { return e(this, n), u(this, a(n).apply(this, arguments)) } return s(n, I), i(n, [{ key: "buildElement", value: function () { return x("<img></img>") } }, { key: "src", set: function (t) { this.attr = { src: t } } }]), n }(), ue = "xmui-mobile-approve-pending", le = function (t) { function n(t, i, o, s) { var r; e(this, n); var l = (r = u(this, a(n).call(this, H.page_mobile_approve, ue, t))).createContent(i, o, s); return r.setContent(l), d(a(n.prototype), "busy", !0, c(r), !0), r } return s(n, ee), i(n, [{ key: "createContent", value: function (t, e, n) { var i = new P; return i.className = "".concat(ue, "_container"), i.appendChild(this.createSpacer()), null == e ? this.createNoCodeContent(t, i) : e === com.ts.mobile.sdk.OtpFormatType.Numeric ? this.createNumericCodeContent(n, t, i) : e === com.ts.mobile.sdk.OtpFormatType.QrCode && this.createQRCodeContent(n, t, i), i } }, { key: "createMessage", value: function (t) { var e = new E; return e.setText(t), e.className = "".concat(ue, "_message"), e } }, { key: "createSpacer", value: function () { var t = new P; return t.className = "".concat(ue, "_spacer"), t } }, { key: "createNoCodeContent", value: function (t, e) { var n = new P; n.className = "".concat(ue, "_icon ").concat(S.MobileApproveWaiting); var i = this.createMessage(t); e.appendChildren(n, this.createSpacer(), i, this.createSpacer()) } }, { key: "createNumericCodeContent", value: function (t, e, n) { var i = this.createMessage(e), o = new E; return o.className = "".concat(ue, "_numeric-code"), o.setText(t), n.appendChildren(i, this.createSpacer(), o, this.createSpacer()), n } }, { key: "createQRCodeContent", value: function (t, e, n) { var i = this.createMessage(e), o = new P; o.className = "".concat(ue, "_qr-code-container"); var s = new ce; return s.className = "".concat(ue, "_qr-code"), s.src = t, o.appendChild(s), n.appendChildren(i, this.createSpacer(), o), n } }, { key: "busy", set: function (t) { } }]), n }(); !function (t) { t[t.TargetSelection = 0] = "TargetSelection", t[t.PollingRequested = 1] = "PollingRequested", t[t.PollingStarted = 2] = "PollingStarted" }(te || (te = {})); var _e, he = function (t) { function n(t, i, o) { var s; return e(this, n), (s = u(this, a(n).call(this, t, i))).state = te.TargetSelection, s.pollingIntervalMillis = 3e3, s.instructions = o, s } return s(n, Mt), i(n, [{ key: "setPollingIntervalInMillis", value: function (t) { this.pollingIntervalMillis = t } }, { key: "setCreatedApprovalInfo", value: function (t, e) { null != t ? (this.setupOtp(e), this.state = te.PollingRequested) : (this.setupOtp(null), this.state = te.TargetSelection, clearTimeout(this.pollingTimer)) } }, { key: "setAvailableTargets", value: function (t) { this.availableTargets = t } }, { key: "endSession", value: function () { _(a(n.prototype), "endSession", this).call(this), clearTimeout(this.pollingTimer) } }, { key: "promiseInput", value: function () { var t, e = this; switch (this.mode) { case com.ts.mobile.sdk.AuthenticatorSessionMode.Authentication: switch (St.log("Fetching Mobile Approve authentication input;"), this.state) { case te.TargetSelection: t = this.promiseTargetSelectionInput(); break; case te.PollingRequested: this.state = te.PollingStarted, this.showPendingUI(), t = this.startPolling(); break; case te.PollingStarted: t = this.startPolling() }break; case com.ts.mobile.sdk.AuthenticatorSessionMode.Registration: }return (t = t || Promise.reject("Illegal state")).then((function (t) { return e.authError = null, t })) } }, { key: "promiseTargetSelectionInput", value: function () { var t = this; return new Promise((function (e, n) { t.setInputResolver(e); var i = new re(t.actionContext); i.setTitle(t.uiContext.getString(W.ts_authenticator_mobile_approve)), i.setInstructions(t.uiContext.getString(W.ts_authenticator_mobile_approve_targets_intro)); var o = {}; t.availableTargets.forEach((function (e) { var n = e.getDeviceDetails(), s = n.getDeviceId(), a = yt.getDeviceNameFromDeviceDetails(n), r = yt.getLastAccessedFromDeviceDetails(t.uiContext, n); o[s] = e, i.addDevice(s, a, r, !1) })), i.onSubmit((function (e) { i.blockInteraction(); var n = e.map((function (t) { return o[t] })), s = yt.createTargetsSelectionResponse(n); t.resolveInputPromise(s) })), t.showAuthenticatorPage(i) })) } }, { key: "showPendingUI", value: function () { var t = new le(this.actionContext, this.instructions, this.otpType, this.otpCode); t.setTitle(this.uiContext.getString(W.ts_authenticator_mobile_approve)), this.showAuthenticatorPage(t) } }, { key: "onCancel", value: function () { this.currentInputResolveFn ? (clearTimeout(this.pollingTimer), _(a(n.prototype), "onCancel", this).call(this)) : this.pendingRequest = yt.createCancelAuthenticatorRequest() } }, { key: "onEscape", value: function (t) { clearTimeout(this.pollingTimer), _(a(n.prototype), "onEscape", this).call(this, t) } }, { key: "setupOtp", value: function (t) { if (t) { var e = t.getFormat().getType(); switch (this.otpType = e, e) { case com.ts.mobile.sdk.OtpFormatType.Numeric: this.otpCode = t.getValue(); break; case com.ts.mobile.sdk.OtpFormatType.QrCode: this.otpCode = "data:image/jpeg;base64," + t.getValue(); break; default: throw St.log("Unsupported otp format"), new Error("Unsupported otp format") } } else this.otpType = null, this.otpCode = null } }, { key: "startPolling", value: function () { var t = this; return new Promise((function (e, n) { t.setInputResolver(e), t.pollingTimer = setTimeout((function () { if (t.pendingRequest) t.resolveInputPromise(t.pendingRequest), t.pendingRequest = null; else { var e = com.ts.mobile.sdk.MobileApproveInputRequestPolling.createRequestPollingInput(), n = com.ts.mobile.sdk.TargetBasedAuthenticatorInput.createAuthenticatorInput(e), i = com.ts.mobile.sdk.InputOrControlResponse.createInputResponse(n); t.resolveInputPromise(i) } }), t.pollingIntervalMillis) })) } }, { key: "showAuthUi", value: function () { throw new Error("Method not implemented") } }, { key: "showRegUi", value: function () { throw new Error("Method not implemented") } }]), n }(), de = "xmui-pin-code", pe = function (t) { function n(t, i) { var o; e(this, n), (o = u(this, a(n).call(this))).digits = [], o.className = de, o.mainInput = new Lt(t), o.mainInput.className = "".concat(de, "_input"); var s = new P; s.className = "".concat(de, "_container"), o.messageComp = new jt(!0, !0), o.changeHandler = o.changeHandler.bind(c(o)); for (var r = 0; r < i; r++) { var l = new Lt(t + "_digit_" + r); l.className = "".concat(de, "_digit"), l.type = "text", l.autocomplete = Yt.Off, l.ariaLabel = "pin code digit ".concat(r + 1), l.onKeypress(o.keypressHandler), l.onKeydown(o.keydownHandler), l.onPaste((function (t) { return t.preventDefault() })), l.onCut((function (t) { return t.preventDefault() })), l.onFocus(o.focusHandler), l.onChange(o.changeHandler), 0 === r ? (l.tabindex = 0, l.ariaDescribedBy = o.messageComp.id) : l.tabindex = -1, o.digits.push(l), s.appendChild(l) } return o.appendChildren(o.mainInput, s, o.messageComp), o } return s(n, P), i(n, [{ key: "focus", value: function () { var t = this.digits[0]; t && t.focus() } }, { key: "onChange", value: function (t) { this.changeCB = t } }, { key: "setError", value: function (t) { this.error = !0, this.errorMessage = t || "" } }, { key: "clearError", value: function () { this.error = !1, this.errorMessage = "" } }, { key: "keypressHandler", value: function (t, e) { var n = e.keyCode, i = e.target; i.selectionEnd - i.selectionStart == 0 && 1 === i.value.length || n < Q.Zero || n > Q.Nine ? e.preventDefault() : i.nextElementSibling instanceof HTMLInputElement && i.nextElementSibling.className === "".concat(de, "_digit") && setTimeout((function () { var t = i.nextElementSibling; t.focus(), t.selectionStart = 0, t.selectionEnd = 1 })) } }, { key: "keydownHandler", value: function (t, e) { var n = e.target; e.keyCode === Q.Backspace && 0 === n.selectionStart && 0 === n.selectionEnd && n.previousElementSibling instanceof HTMLInputElement && n.previousElementSibling.className === "".concat(de, "_digit") && (n.previousElementSibling.value = "", n.previousElementSibling.focus()) } }, { key: "focusHandler", value: function (t) { var e = t.target; e.value.length && (e.selectionStart = 0, e.selectionEnd = e.value.length) } }, { key: "changeHandler", value: function () { var t = ""; this.digits.forEach((function (e) { t += e.value })), this.mainInput.value = t, this.changeCB && this.changeCB() } }, { key: "name", set: function (t) { this.mainInput.name = t } }, { key: "value", set: function (t) { this.mainInput.value = t, this.digits.forEach((function (e, n) { e.value = t[n] || "" })) }, get: function () { return this.mainInput.value } }, { key: "errorMessage", set: function (t) { this.messageComp.setText(t) } }]), n }(), me = "xmui-pin-code-authentication", ge = "xmui-pin-code-registration"; !function (t) { t[t.Enter = 0] = "Enter", t[t.Repeat = 1] = "Repeat" }(_e || (_e = {})); var ve = function (t) { function n(t, i, o) { var s; e(this, n), (s = u(this, a(n).call(this, o ? H.page_pin_reg : H.page_pin_auth, o ? ge : me, t))).numDigits = i, s.isRegistrationMode = o, s.mode = _e.Enter, s.setTitle(s.getTitle()), s.setInstructions(s.getInstructions()); var r = s.createForm(); if (s.setContent(r), s.isRegistrationMode) { var l = new ht(H.button_reset); l.label = s.uiContext.getString(W.ts_gen_restart), l.disabled = !0, l.onClick(s.handleReset.bind(c(s))), s.resetButton = l, s.addRightButton(l) } return s } return s(n, ee), i(n, [{ key: "onSubmit", value: function (t) { this.onSubmitCB = t } }, { key: "setError", value: function (t) { this.error = !0, this.pinCode.setError(t) } }, { key: "clearError", value: function () { this.pinCode.clearError(), this.error = !1 } }, { key: "getTitle", value: function () { var t = this.isRegistrationMode ? W.ts_authenticator_pin_title_reg : W.ts_authenticator_pin_title_auth; return this.uiContext.getString(t) } }, { key: "getRegModeInstructions", value: function () { var t = this.mode === _e.Enter ? W.ts_authenticator_pin_intro_reg : W.ts_authenticator_pin_intro_repeat; return this.uiContext.getString(t) } }, { key: "getInstructions", value: function () { return this.isRegistrationMode ? this.getRegModeInstructions() : this.uiContext.getString(W.ts_authenticator_pin_intro_auth) } }, { key: "handleReset", value: function () { this.mode = _e.Enter, this.pinCode.value = "", this.pinCode.focus(), this.enteredPinCode = null, this.resetButton.disabled = !0, this.setInstructions(this.getInstructions()) } }, { key: "handleNoMatch", value: function () { this.pinCode.value = "", this.pinCode.setError(this.uiContext.getString(W.ts_authenticator_pin_error_reg_no_match)), this.pinCode.focus() } }, { key: "submitPinCode", value: function (t) { this.onSubmitCB && this.onSubmitCB(t) } }, { key: "repeat", value: function () { this.mode = _e.Repeat, this.pinCode.value = "", this.pinCode.focus(), this.resetButton.disabled = !1, this.setInstructions(this.getInstructions()) } }, { key: "handleRegPinCodeChanged", value: function (t) { this.mode === _e.Enter ? (this.enteredPinCode = t, this.repeat()) : this.enteredPinCode === t ? this.submitPinCode(t) : this.handleNoMatch() } }, { key: "handlePinCodeChanged", value: function () { this.clearError(); var t = this.pinCode.value; t.length === this.numDigits && (this.isRegistrationMode ? this.handleRegPinCodeChanged(t) : this.submitPinCode(t)) } }, { key: "createForm", value: function () { var t = new Jt; t.addClass("xmui-pin-code-form"); var e = new pe(H.input_pin_code, this.numDigits); return e.name = "pin-code", e.value = "", e.onChange(this.handlePinCodeChanged.bind(this)), e.focus(), this.pinCode = e, t.appendChild(e), t } }]), n }(), fe = function (t) { function n(t, i, o) { var s; return e(this, n), (s = u(this, a(n).call(this, t, i))).supportsInlineError = !0, s.pinLength = o, s } return s(n, Mt), i(n, [{ key: "showAuthUi", value: function () { this.showPinCodePage(!1) } }, { key: "showRegUi", value: function () { this.showPinCodePage(!0) } }, { key: "showPinCodePage", value: function (t) { var e = this, n = new ve(this.actionContext, this.pinLength, t); this.authError && n.setError(this.authError.getMessage()), n.onSubmit((function (t) { n.blockInteraction(); var i = com.ts.mobile.sdk.PinInput.create(t); e.resolveInputPromise(com.ts.mobile.sdk.InputOrControlResponse.createInputResponse(i)) })), this.showAuthenticatorPage(n) } }]), n }(); function ye() { } function ke(t) { return t instanceof NodeList || t instanceof HTMLCollection ? Array.prototype.slice.call(t) : [t] } function Ce(t, e) { if ("string" == typeof e) return window.getComputedStyle(t)[e]; Object.keys(e).forEach((function (n) { var i = e[n]; t.style[n] = i })) } function be(t, e) { var n = e.split(" "); n.length > 1 ? n.forEach((function (e) { return be(t, e) })) : t.classList ? t.classList.add(e) : t.className += " ".concat(e) } function we(t, e) { var n = e.split(" "); n.length > 1 ? n.forEach((function (e) { return we(t, e) })) : t.classList ? t.classList.remove(e) : t.className = t.className.replace(new RegExp("(^|\\b)".concat(e.split(" ").join("|"), "(\\b|$)"), "gi"), " ") } function xe(t) { ke(t).forEach((function (t) { t.parentNode.removeChild(t) })) } function Se(t, e, n, i) { var o = e - t, s = i - n; return { length: Math.ceil(Math.sqrt(o * o + s * s)), angle: Math.round(180 * Math.atan2(s, o) / Math.PI) } } var Ie = new WeakMap, Ee = function () { function t() { e(this, t), this.holder = null, this.option = null, this.mapperFunc = ye, this.holderLeft = 0, this.holderTop = 0, this.disabled = !1, this.patternAry = [], this.lastPosObj = [], this.rightPattern = null, this.onSuccess = ye, this.onError = ye, this.pattCircle = null, this.lineX1 = 0, this.lineY1 = 0, this.line = null, this.lastPosObj = null, this.dotYOffest = null } return i(t, [{ key: "getElementsFromPoint", value: function (t, e) { if (document.elementsFromPoint) return document.elementsFromPoint(t, e); for (var n = [], i = document.msElementsFromPoint(t, e), o = i.length, s = 0; s < o; s++)n.push(i.item(s)); return n } }, { key: "getIdxFromPoint", value: function (t, e) { var n, i, o, s, a = t - this.holderLeft, r = e - this.holderTop; if (this.getElementsFromPoint(t, e).some((function (t) { return -1 != t.className.indexOf("patt-circ") && (n = t.firstElementChild, !0) })), n) { var c = this.option.matrix, u = parseInt(n.getAttribute("patt-dots-index")); s = u + 1, i = u % c[1] + 1, o = Math.floor(u / c[1]) + 1 } return { idx: s, i: i, j: o, x: a, y: r } } }, { key: "markPoint", value: function (t, e) { be(t, "hovered"), this.patternAry.push(e), this.lastElm = t } }, { key: "addLine", value: function (t) { var e = this.dotYOffest, n = this.pattCircle, i = this.patternAry, o = this.holderLeft, s = this.holderTop, a = this.holder, r = this.option.lineOnMove, c = n[t.idx - 1].firstElementChild.getBoundingClientRect(), u = c.left + c.width / 2 - o, l = c.top + c.height / 2 - s; if (i.length > 1) { var _ = Se(this.lineX1, u, this.lineY1, l), h = _.length, d = _.angle; Ce(this.line, { width: "".concat(h, "px"), transform: "rotate(".concat(d, "deg)") }), r || Ce(this.line, { display: "block" }) } if (null == e) { var p = document.createElement("div"); p.className = "patt-lines", p.style.width = "0px", p.style.visibility = "hidden", p.style.position = "absolute", p.style.top = "0px", p.style.left = "0px", a.appendChild(p); var m = p.getBoundingClientRect(); this.dotYOffest = m.height / 2, a.removeChild(p) } var g, v, f = (g = '<div class="patt-lines" style="top:'.concat(l - this.dotYOffest, "px; left: ").concat(u, 'px;"></div>'), (v = document.createElement("div")).innerHTML = g, v.children[0]); this.line = f, this.lineX1 = u, this.lineY1 = l, this.holder.appendChild(f), r || Ce(this.line, { display: "none" }) } }, { key: "addDirectionClass", value: function (t) { var e = this.lastElm, n = this.line, i = this.lastPosObj, o = []; if (t.j - i.j > 0 ? o.push("s") : t.j - i.j < 0 && o.push("n"), t.i - i.i > 0 ? o.push("e") : t.i - i.i < 0 && o.push("w"), o = o.join("-")) { var s = "".concat(o, " dir"); be(e, s), be(n, s) } } }]), t }(), Ae = function () { function n(i) { var o = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}; e(this, n), this._onStart = this._onStart.bind(this), this._onMove = this._onMove.bind(this), this._onEnd = this._onEnd.bind(this), this._renderCircle = this._renderCircle.bind(this); var s = new Ee, a = i; if (a && 0 !== a.length) { var r = { onDraw: ye, onStart: ye }, c = o.matrix; c && c[0] * c[1] > 9 && (r.delimiter = ","), s.option = function (t) { for (var e = arguments.length, n = new Array(e > 1 ? e - 1 : 0), i = 1; i < e; i++)n[i - 1] = arguments[i]; return n.forEach((function (e) { Object.keys(e).forEach((function (n) { t[n] = e[n] })) })), t }({}, n.defaults, r, o), s.circContainerWidth = 100 / s.option.matrix[1], s.circContainerHeight = 100 / s.option.matrix[0]; var u = s.option.mapper; "object" === t(u) ? s.mapperFunc = function (t) { return u[t] } : s.mapperFunc = "function" == typeof u ? u : ye, s.option.mapper = null, s.holder = a, Ie.set(this, s), this._render(), be(a, "patt-holder"), "static" === Ce(a, "position") && Ce(a, { position: "relative" }), a.addEventListener("touchstart", this._onStart), a.addEventListener("mousedown", this._onStart) } } return i(n, [{ key: "getPattern", value: function () { var t = Ie.get(this), e = t.patternAry, n = t.option; return (e || []).join(n.delimiter) } }, { key: "setPattern", value: function (t) { var e = Ie.get(this), n = e.option, i = n.matrix, o = n.margin, s = n.radius, a = n.enableSetPattern, r = n.delimiter; if (a) { var c = "string" == typeof t ? t.split(r) : t; this.reset(), e.holderLeft = 0, e.holderTop = 0; for (var u = 0; u < c.length; u += 1) { var l = c[u] - 1, _ = l % i[1] * (2 * o + 2 * s) + 2 * o + s, h = Math.floor(l / i[1]) * (2 * o + 2 * s) + 2 * o + s; this._onMove.call(null, { clientX: _, clientY: h, preventDefault: ye }, this) } } } }, { key: "enable", value: function () { Ie.get(this).disabled = !1 } }, { key: "disable", value: function () { Ie.get(this).disabled = !0 } }, { key: "reset", value: function () { var t = Ie.get(this); ke(t.pattCircle).forEach((function (t) { return we(t, "hovered dir s n w e s-w s-e n-w n-e") })), xe(t.holder.querySelectorAll(".patt-lines")), t.patternAry = [], t.lastPosObj = null, we(t.holder, "patt-error") } }, { key: "setError", value: function () { be(Ie.get(this).holder, "patt-error") } }, { key: "clearError", value: function () { we(Ie.get(this).holder, "patt-error") } }, { key: "checkForPattern", value: function (t, e, n) { var i = Ie.get(this); i.rightPattern = t, i.onSuccess = e || ye, i.onError = n || ye } }, { key: "_onStart", value: function (t) { var e = Ie.get(this), n = e.holder, i = e.option; if (t.preventDefault(), !e.disabled) { e.option.patternVisible || be(e.holder, "patt-hidden"), this.moveEvent = "touchstart" === t.type ? "touchmove" : "mousemove", this.endEvent = "touchstart" === t.type ? "touchend" : "mouseup", n.addEventListener(this.moveEvent, this._onMove), document.addEventListener(this.endEvent, this._onEnd); var o = e.holder.getBoundingClientRect(); e.holderTop = o.top, e.holderLeft = o.left, this.reset(), i.onStart() } } }, { key: "_onMove", value: function (t) { t.preventDefault(); var e = Ie.get(this), n = e.option, i = e.patternAry, o = t.clientX || t.touches[0].clientX, s = t.clientY || t.touches[0].clientY, a = e.pattCircle, r = e.getIdxFromPoint(o, s), c = r.idx, u = e.mapperFunc(c) || c; if (i.length > 0) { var l = Se(e.lineX1, r.x, e.lineY1, r.y), _ = l.length, h = l.angle; Ce(e.line, { width: "".concat(_ + 2, "px"), transform: "rotate(".concat(h, "deg)") }) } if (c && (n.allowRepeat && i[i.length - 1] !== u || -1 === i.indexOf(u))) { var d = a[c - 1]; if (e.lastPosObj) for (var p = e.lastPosObj, m = r.i - p.i > 0 ? 1 : -1, g = r.j - p.j > 0 ? 1 : -1, v = p.i, f = p.j, y = Math.abs(r.i - v), k = Math.abs(r.j - f); 0 === y && k > 1 || 0 === k && y > 1 || k === y && k > 1;) { v = y ? v + m : v, f = k ? f + g : f, y = Math.abs(r.i - v), k = Math.abs(r.j - f); var C = (f - 1) * n.matrix[1] + v, b = e.mapperFunc(C) || C; (n.allowRepeat || -1 === i.indexOf(b)) && (e.addDirectionClass({ i: v, j: f }), e.markPoint(a[b - 1], b), e.addLine({ idx: c, i: v, j: f })) } e.lastPosObj && e.addDirectionClass(r), e.markPoint(d, u), e.addLine(r), e.lastPosObj = r } } }, { key: "_onEnd", value: function (t) { t.preventDefault(); var e = Ie.get(this), n = e.option, i = e.patternAry.join(n.delimiter); e.holder.removeEventListener(this.moveEvent, this._onMove), document.removeEventListener(this.endEvent, this._onEnd), we(e.holder, "patt-hidden"), i && (xe(e.line), n.onDraw(i), e.rightPattern && (i === e.rightPattern ? e.onSuccess() : (e.onError(), this.error()))) } }, { key: "_renderCircle", value: function (t, e) { var n = Ie.get(this), i = n.circContainerHeight, o = n.circContainerWidth; return '<div class="patt-circ-container" style="width: '.concat(o, "%; height: ").concat(i, "%; flex-basis: ").concat(o, '%;">\n                <div class="patt-circ">\n                  <div patt-dots-index=').concat(e, ' class="patt-dots"></div>\n                </div>\n            </div>') } }, { key: "_render", value: function () { var t = Ie.get(this), e = t.option, n = t.holder, i = e.matrix, o = (e.margin, e.radius, '<div class="patt-wrap">\n                    '.concat(function (t, e) { for (var n = new Array(t), i = 0; i < t; i++)n[i] = e; return n }(i[0] * i[1]).map(this._renderCircle).join(""), "\n                  </div>")); n.innerHTML = o, t.pattCircle = t.holder.querySelectorAll(".patt-circ") } }, { key: "option", value: function (t, e) { var n = Ie.get(this).option; return void 0 === e ? n[t] : (n[t] = e, "margin" !== t && "matrix" !== t && "radius" !== t || this._render(), this) } }]), n }(); Ae.defaults = { matrix: [3, 3], margin: 20, radius: 25, patternVisible: !0, lineOnMove: !0, delimiter: "", enableSetPattern: !1, allowRepeat: !0 }; var Pe, Te = "xmui-pattern-lock", Re = "".concat(Te, "_pattern"), Me = function (t) { function n(t, i, o) { var s; e(this, n), (s = u(this, a(n).call(this))).className = Te, s.tabindex = 0, s.mainInput = new Lt(t), s.mainInput.className = "".concat(Te, "_input"), s.appendChild(s.mainInput), s.handleSelectedPattern = s.handleSelectedPattern.bind(c(s)), s.handlePatternStarted = s.handlePatternStarted.bind(c(s)); var r = new P; return r.className = Re, s.patternLockExt = new Ae(r.htmlElement, { matrix: [o, i], onDraw: s.handleSelectedPattern, onStart: s.handlePatternStarted }), s.messageComp = new jt(!0, !0), s.ariaDescribedBy = s.messageComp.id, s.appendChildren(r, s.messageComp), s } return s(n, P), i(n, [{ key: "setError", value: function (t) { this.error = !0, this.errorMessage = t || "", this.patternLockExt.setError() } }, { key: "clearError", value: function () { this.error = !1, this.errorMessage = "", this.patternLockExt.clearError() } }, { key: "reset", value: function () { this.patternLockExt.reset() } }, { key: "onChange", value: function (t) { this.changeCB = t } }, { key: "onStart", value: function (t) { this.startCB = t } }, { key: "handleSelectedPattern", value: function (t) { this.mainInput.value = t, this.changeCB && this.changeCB() } }, { key: "handlePatternStarted", value: function () { this.startCB && this.startCB() } }, { key: "name", set: function (t) { this.mainInput.name = t } }, { key: "value", set: function (t) { }, get: function () { return this.mainInput.value } }, { key: "errorMessage", set: function (t) { this.messageComp.setText(t) } }]), n }(), Be = "xmui-pattern-authentication", Ne = "xmui-pattern-registration"; !function (t) { t[t.Enter = 0] = "Enter", t[t.Repeat = 1] = "Repeat" }(Pe || (Pe = {})); var De, Le = function (t) { function n(t, i, o, s) { var r; e(this, n), (r = u(this, a(n).call(this, s ? H.page_pattern_reg : H.page_pattern_auth, s ? Ne : Be, t))).isRegistrationMode = s, r.mode = Pe.Enter, r._minPoints = 4, r.setTitle(r.getTitle()), r.setInstructions(r.getInstructions()); var l = r.createForm(i, o); if (r.setContent(l), r.isRegistrationMode) { var _ = new ht(H.button_reset); _.label = r.uiContext.getString(W.ts_authenticator_pattern_cta_reset), _.disabled = !0, _.onClick(r.handleReset.bind(c(r))), r.resetButton = _, r.addRightButton(_) } return r } return s(n, ee), i(n, [{ key: "onSubmit", value: function (t) { this.onSubmitCB = t } }, { key: "setError", value: function (t) { this.error = !0, this.patternLock.setError(t) } }, { key: "clearError", value: function () { this.error = !1, this.patternLock.clearError() } }, { key: "handleReset", value: function () { this.mode = Pe.Enter, this.patternLock.reset(), this.enteredPattern = null, this.resetButton.disabled = !0, this.setInstructions(this.getInstructions()), this.clearError() } }, { key: "getTitle", value: function () { var t = this.isRegistrationMode ? W.ts_authenticator_pattern_title_reg : W.ts_authenticator_pattern_title_auth; return this.uiContext.getString(t) } }, { key: "getRegModeInstructions", value: function () { var t = this.mode === Pe.Enter ? W.ts_authenticator_pattern_intro_reg : W.ts_authenticator_pattern_intro_repeat; return this.uiContext.getString(t) } }, { key: "getInstructions", value: function () { return this.isRegistrationMode ? this.getRegModeInstructions() : this.uiContext.getString(W.ts_authenticator_pattern_intro_auth) } }, { key: "handleNoMatch", value: function () { this.patternLock.setError(this.uiContext.getString(W.ts_authenticator_pattern_mismatch)) } }, { key: "submitPattern", value: function (t) { this.onSubmitCB && this.onSubmitCB(t) } }, { key: "repeat", value: function () { this.patternLock.reset(), this.mode = Pe.Repeat, this.resetButton.disabled = !1, this.setInstructions(this.getInstructions()) } }, { key: "validateLength", value: function (t) { return JSON.parse("[" + t + "]").length >= this._minPoints } }, { key: "handleRegPatternChangedEnterMode", value: function (t) { this.validateLength(t) ? (this.enteredPattern = t, this.repeat()) : this.notifyShortPattern() } }, { key: "notifyShortPattern", value: function () { this.patternLock.setError(this.uiContext.getString(W.ts_authenticator_pattern_error_min_points)) } }, { key: "handleRegPattrenChanged", value: function (t) { this.mode === Pe.Enter ? this.handleRegPatternChangedEnterMode(t) : this.enteredPattern === t ? this.submitPattern(t) : this.handleNoMatch() } }, { key: "handlePattrenChanged", value: function () { var t = this.patternLock.value; this.isRegistrationMode ? this.handleRegPattrenChanged(t) : this.submitPattern(t) } }, { key: "handlePatternStarted", value: function () { this.clearError() } }, { key: "createForm", value: function (t, e) { var n = new Jt; n.addClass("xmui-pattern-form"); var i = new Me(H.input_pattern_lock, t, e); return i.name = "pattern", i.onChange(this.handlePattrenChanged.bind(this)), i.onStart(this.handlePatternStarted.bind(this)), i.focus(), this.patternLock = i, n.appendChild(i), n } }, { key: "minPoints", set: function (t) { t > 2 && (this._minPoints = t) } }]), n }(), Fe = function (t) { function n(t, i, o, s) { var r; return e(this, n), (r = u(this, a(n).call(this, t, i))).gridWidth = o, r.gridHeight = s, r.supportsInlineError = !0, r } return s(n, Mt), i(n, [{ key: "showAuthUi", value: function () { this.showPatternPage(!1) } }, { key: "showRegUi", value: function () { this.showPatternPage(!0) } }, { key: "showPatternPage", value: function (t) { var e = this, n = new Le(this.actionContext, this.gridWidth, this.gridHeight, t); this.authError && n.setError(this.authError.getMessage()), n.onSubmit((function (t) { n.blockInteraction(); var i = com.ts.mobile.sdk.PatternInput.create(e.createPatternInputString(t)); e.resolveInputPromise(com.ts.mobile.sdk.InputOrControlResponse.createInputResponse(i)) })), this.showAuthenticatorPage(n) } }, { key: "pointsIndexToCoorinate", value: function (t) { var e = this; return t.map((function (t) { return { y: Math.floor((t - 1) / e.gridWidth), x: (t - 1) % e.gridWidth } })) } }, { key: "createPatternInputString", value: function (t) { var e = JSON.parse("[".concat(t, "]")); return this.pointsIndexToCoorinate(e).map((function (t) { return "r:".concat(t.y, ",c:").concat(t.x) })).join("") } }]), n }(), qe = "xmui-tabs", Oe = function (t) { function n() { var t; return e(this, n), (t = u(this, a(n).call(this))).tabs = new Map, t.className = qe, t } return s(n, P), i(n, [{ key: "addTab", value: function (t, e) { var n = this, i = new P; i.className = "".concat(qe, "_tab"), i.appendChild(e), this.tabs.set(t, i), this.appendChild(i), i.onClick((function () { i !== n.selectedTab && (n.selectTab(i), n.selectionChangedCB && n.selectionChangedCB(t)) })) } }, { key: "selectTabByKey", value: function (t) { var e = this.tabs.get(t); this.selectTab(e) } }, { key: "onSelectionChanged", value: function (t) { this.selectionChangedCB = t } }, { key: "selectTab", value: function (t) { t && (this.unselectCurrentTab(), t.selected = !0, this.selectedTab = t) } }, { key: "unselectCurrentTab", value: function () { this.selectedTab && (this.selectedTab.selected = !1, this.selectedTab = null) } }]), n }(), je = "xmui-tabbed-panels", Ue = function (t) { function n() { var t; return e(this, n), (t = u(this, a(n).call(this))).keyToPanel = new Map, t.curKey = 0, t.className = je, t.tabs = new Oe, t.tabs.onSelectionChanged(t.selectPanel.bind(c(t))), t.container = new P, t.container.className = "".concat(je, "_container"), t.appendChildren(t.tabs, t.container), t } return s(n, P), i(n, [{ key: "addPanel", value: function (t, e) { var n = this.generateKey(); this.tabs.addTab(n, t), e.show = !1, this.container.appendChild(e), this.keyToPanel.set(n, e), 1 === this.keyToPanel.size && (this.tabs.selectTabByKey(n), this.selectPanel(n)) } }, { key: "generateKey", value: function () { return (++this.curKey).toString() } }, { key: "selectPanel", value: function (t) { var e = this.keyToPanel.get(t); e !== this.selectedPanel && (e.show = !0, this.selectedPanel && (this.selectedPanel.show = !1), this.selectedPanel = e) } }]), n }(), He = "xmui-tab-content", Qe = "".concat(He, "_title"), Ke = "".concat(He, "_icon"), Ve = function (t) { function n() { var t; return e(this, n), (t = u(this, a(n).call(this))).className = He, t.iconComp = new P, t.iconComp.className = Ke, t.titleComp = new E, t.titleComp.className = Qe, t.appendChildren(t.iconComp, t.titleComp), t } return s(n, P), i(n, [{ key: "title", set: function (t) { this.titleComp.setText(t) } }, { key: "icon", set: function (t) { this.iconComp.className = "".concat(Ke, " ").concat(t) } }]), n }(), ze = "xmui-select-channel-page", We = function (t) { function n(t) { var i, s; e(this, n), (s = u(this, a(n).call(this, H.page_otp_select_channel, ze, t))).typeToList = new Map, s.channelTypeToLocalizationKey = (o(i = {}, com.ts.mobile.sdk.OtpChannel.Sms, W.ts_authenticator_otp_sms_title), o(i, com.ts.mobile.sdk.OtpChannel.Email, W.ts_authenticator_otp_email_title), o(i, com.ts.mobile.sdk.OtpChannel.PushNotification, W.ts_authenticator_otp_push_title), o(i, com.ts.mobile.sdk.OtpChannel.VoiceCall, W.ts_authenticator_otp_voice_title), i); var r = s.createContent(); return s.setContent(r), s.handleSelectionChanged = s.handleSelectionChanged.bind(c(s)), s } return s(n, ee), i(n, [{ key: "createContent", value: function () { return this.tabbedPanels = new Ue, this.tabbedPanels } }, { key: "addChannelTarget", value: function (t) { var e = this.typeToList.get(t.channel) || this.createTabbedList(t), n = new rt(t.targetName, t.targetInfo); e.addListItem(t.targetId, !1, n) } }, { key: "onSubmit", value: function (t) { this.onSubmitCB = t } }, { key: "handleSelectionChanged", value: function (t) { this.onSubmitCB && this.onSubmitCB(t[0]) } }, { key: "createList", value: function (t) { var e = new st; return this.typeToList.set(t, e), e.onSelectionChanged(this.handleSelectionChanged), e } }, { key: "createTabbedList", value: function (t) { var e = new Ve, n = this.channelTypeToLocalizationKey[t.channel] || "UNKNOWN"; e.title = this.uiContext.getString(n), e.icon = ct.getChannelIcon(t.channel); var i = this.createList(t.channel); return this.tabbedPanels.addPanel(e, i), i } }]), n }(), Ze = "xmui-message-with-action", Ye = function (t) { function n() { var t; return e(this, n), (t = u(this, a(n).call(this))).className = Ze, t.message = new E, t.message.className = "".concat(Ze, "_message"), t.action = new E, t.action.className = "".concat(Ze, "_action"), t.appendChildren(t.message, t.action), t } return s(n, P), i(n, [{ key: "setMessage", value: function (t) { this.message.setText(t) } }, { key: "setAction", value: function (t, e) { this.action.setText(t), this.onClick(e) } }]), n }(), $e = "xmui-otp-page", Ge = "".concat($e, "_content"), Xe = "".concat($e, "_message-container"), Je = 7, tn = function (t) { function n(t, i, o) { var s; e(this, n), (s = u(this, a(n).call(this, H.page_otp_auth, $e, t))).numDigits = i, s.useBackButton = o, s.useNormalInput = s.numDigits > Je, s.setTitle(s.uiContext.getString(W.ts_authenticator_otp_title_auth)); var r = s.createContent(); if (s.setContent(r), o && (s.cancelButton.automationId = H.button_back, s.cancelButton.label = s.uiContext.getString(W.ts_gen_back)), s.useNormalInput) { var c = new ht(H.button_continue); c.label = s.uiContext.getString(W.ts_gen_continue), c.disabled = !0, c.onClick((function () { s.submitOtpCode(s.otpCodeComp.value) })), s.continueButton = c, s.addRightButton(c) } return s } return s(n, ee), i(n, [{ key: "handleCancelButtonClicked", value: function () { this.useBackButton ? this.onBackCB && this.onBackCB() : _(a(n.prototype), "handleCancelButtonClicked", this).call(this) } }, { key: "onBack", value: function (t) { this.onBackCB = t } }, { key: "onSubmit", value: function (t) { this.onSubmitCB = t } }, { key: "onResend", value: function (t) { this.onResendCB = t } }, { key: "setError", value: function (t) { this.error = !0, this.otpCodeComp.setError(t) } }, { key: "clearError", value: function () { this.otpCodeComp.clearError(), this.error = !1 } }, { key: "submitOtpCode", value: function (t) { this.onSubmitCB && this.onSubmitCB(t) } }, { key: "handleOtpCodeChanged", value: function () { this.clearError(); var t = this.otpCodeComp.value; this.useNormalInput ? this.continueButton.disabled = null == t || 0 === t.length : null != t && t.length === this.numDigits && this.submitOtpCode(t) } }, { key: "createForm", value: function () { var t = new Jt; return this.useNormalInput ? (this.otpCodeComp = new $t(Dt.PositiveInteger, H.input_otp_code), this.otpCodeComp.autocomplete = Yt.Off) : this.otpCodeComp = new pe(H.input_otp_code, this.numDigits), this.otpCodeComp.name = "otp-code", this.otpCodeComp.value = "", this.otpCodeComp.focus(), this.otpCodeComp.onChange(this.handleOtpCodeChanged.bind(this)), t.appendChild(this.otpCodeComp), t } }, { key: "createContent", value: function () { var t = this, e = new P; e.className = Ge; var n = this.createForm(), i = new P; i.className = Xe; var o = new Ye; return o.setMessage(this.uiContext.getString(W.ts_authenticator_otp_resend_message)), o.setAction(this.uiContext.getString(W.ts_authenticator_otp_resend), (function () { t.onResendCB && t.onResendCB() })), i.appendChild(o), e.appendChildren(n, i), e } }]), n }(); !function (t) { t[t.TargetSelection = 0] = "TargetSelection", t[t.Input = 1] = "Input" }(De || (De = {})); var en, nn, on, sn = function (t) { function n(t, i, s, r) { var c, l; return e(this, n), (l = u(this, a(n).call(this, t, i))).autoExecedTarget = r, l.supportsInlineError = !0, l.channelTypeToInstruction = (o(c = {}, com.ts.mobile.sdk.OtpChannel.Sms, W.ts_authenticator_otp_sms_sent), o(c, com.ts.mobile.sdk.OtpChannel.Email, W.ts_authenticator_otp_email_sent), o(c, com.ts.mobile.sdk.OtpChannel.PushNotification, W.ts_authenticator_otp_push_sent), o(c, com.ts.mobile.sdk.OtpChannel.VoiceCall, W.ts_authenticator_otp_voice_sent), o(c, com.ts.mobile.sdk.OtpChannel.Unknown, W.ts_authenticator_otp_external_numeric_sent), c), l.possibleTargets = s, l.state = r ? De.Input : De.TargetSelection, l.target = r, l } return s(n, Mt), i(n, [{ key: "setAvailableTargets", value: function (t) { this.possibleTargets = t } }, { key: "setGeneratedOtp", value: function (t, e) { e ? (this.state = De.Input, t instanceof com.ts.mobile.sdk.OtpFormatNumericImpl ? (this.codeLength = t.getOtpLength(), this.isSupportedFormat = !0) : this.isSupportedFormat = !1) : this.state = De.TargetSelection, this.target = e } }, { key: "showOtpInput", value: function () { var t = this, e = new tn(this.actionContext, this.codeLength, this.possibleTargets.length > 1); e.setTitle(this.uiContext.getString(W.ts_authenticator_otp_title_auth)), e.setInstructions(this.uiContext.getString(this.channelTypeToInstruction[this.target.getChannel()])), this.authError && e.setError(this.authError.getMessage()), e.onSubmit((function (n) { t.authError = null, e.blockInteraction(); var i = com.ts.mobile.sdk.OtpInputOtpSubmission.createOtpSubmission(n), o = com.ts.mobile.sdk.TargetBasedAuthenticatorInput.createAuthenticatorInput(i); t.resolveInputPromise(com.ts.mobile.sdk.InputOrControlResponse.createInputResponse(o)) })), e.onBack((function () { t.authError = null, e.blockInteraction(), t.state = De.TargetSelection, t.showAuthUi() })), e.onResend((function () { t.authError = null, e.blockInteraction(); var n = com.ts.mobile.sdk.OtpInputRequestResend.createOtpResendRequest(), i = com.ts.mobile.sdk.TargetBasedAuthenticatorInput.createAuthenticatorInput(n); t.resolveInputPromise(com.ts.mobile.sdk.InputOrControlResponse.createInputResponse(i)) })), this.showAuthenticatorPage(e) } }, { key: "showTargetSelectionInput", value: function () { var t = this, e = 0, n = {}, i = new We(this.actionContext); i.error = !!this.authError, i.setTitle(this.uiContext.getString(W.ts_authenticator_otp_title_auth)), i.setInstructions(this.getTargetSelectionInstruction()), i.onSubmit((function (e) { t.authError = null, i.blockInteraction(); var o = com.ts.mobile.sdk.TargetBasedAuthenticatorInput.createTargetSelectionRequest(n[e]); t.resolveInputPromise(com.ts.mobile.sdk.InputOrControlResponse.createInputResponse(o)) })), this.possibleTargets.forEach((function (o) { var s = o.getDeviceDetails(), a = (++e).toString(); n[a] = o, i.addChannelTarget({ channel: o.getChannel(), targetId: a, targetName: s ? yt.getDeviceNameFromDeviceDetails(s) : o.getDescription(), targetInfo: s ? yt.getLastAccessedFromDeviceDetails(t.uiContext, s) : null }) })), this.showAuthenticatorPage(i) } }, { key: "onCancel", value: function () { this.authError = null, _(a(n.prototype), "onCancel", this).call(this) } }, { key: "showAuthUi", value: function () { switch (this.state) { case De.TargetSelection: this.showTargetSelectionInput(); break; case De.Input: this.isSupportedFormat ? this.showOtpInput() : Promise.reject("Unsupported Otp code format") } } }, { key: "showRegUi", value: function () { throw new Error("Otp registration unsupported") } }, { key: "getTargetSelectionInstruction", value: function () { var t; return t = this.authError && this.authError.getErrorCode() === com.ts.mobile.sdk.AuthenticationErrorCode.InvalidInput ? W.ts_authenticator_otp_error_code_expired : W.ts_authenticator_otp_targets_intro, this.uiContext.getString(t) } }]), n }(), an = "xmui-totp-page", rn = "xmui-totp-form", cn = function (t) { function n(t, i, s) { var r, l; e(this, n), (l = u(this, a(n).call(this, H.page_totp_auth, an, t))).challengeType = i, l.challenge = s, l.channelTypeLocalizationKeys = (o(r = {}, com.ts.mobile.sdk.TotpChallengeFormatType.Numeric, W.ts_authenticator_totp_input_with_challenge_intro), o(r, com.ts.mobile.sdk.TotpChallengeFormatType.AlphaNumeric, W.ts_authenticator_totp_input_with_challenge_intro), o(r, com.ts.mobile.sdk.TotpChallengeFormatType.QrCode, W.ts_authenticator_totp_input_with_qr_challenge_intro), r), l.setTitle(l.uiContext.getString(W.ts_authenticator_totp_title)), l.setInstructions(l.uiContext.getString(l.channelTypeLocalizationKeys[l.challengeType] || W.ts_authenticator_totp_input_intro)); var _ = l.createForm(); l.setContent(_); var h = new ht(H.button_continue); return h.label = l.uiContext.getString(W.ts_authenticator_password_cta_positive), h.disabled = !0, h.type = nt.Submit, h.form = rn, h.onClick(l.handleSend.bind(c(l))), l.sendButton = h, l.addRightButton(h), l } return s(n, ee), i(n, [{ key: "onSubmit", value: function (t) { this.onSubmitCB = t } }, { key: "setError", value: function (t) { this.error = !0, this.totpCodeInput.setError(t) } }, { key: "clearError", value: function () { this.error = !1, this.totpCodeInput.clearError() } }, { key: "handleSend", value: function () { this.onSubmitCB && this.onSubmitCB(this.totpCodeInput.value) } }, { key: "handleTotpCodeChanged", value: function () { var t = this.totpCodeInput.value; this.sendButton.disabled = null == t || 0 === t.length } }, { key: "createSpacer", value: function () { var t = new P; return t.className = "".concat("xmui-totp-form", "_spacer"), t } }, { key: "createChallenge", value: function () { var t; switch (this.challengeType) { case com.ts.mobile.sdk.TotpChallengeFormatType.QrCode: var e = new P; e.className = "".concat("xmui-totp-form", "_qr-code-container"); var n = new ce; n.className = "".concat("xmui-totp-form", "_qr-code"), n.src = this.challenge, e.appendChild(n), t = e; break; case com.ts.mobile.sdk.TotpChallengeFormatType.Numeric: case com.ts.mobile.sdk.TotpChallengeFormatType.AlphaNumeric: var i = new E; i.className = "".concat("xmui-totp-form", "_alphanumeric-code"), i.setText(this.challenge), t = i }return t } }, { key: "createStep1Title", value: function () { var t = new E; t.className = "".concat("xmui-totp-form", "_step"); var e = this.challengeType === com.ts.mobile.sdk.TotpChallengeFormatType.QrCode ? W.ts_authenticator_totp_qrcode_challenge_step1_message : W.ts_authenticator_totp_code_challenge_step1_message; return t.setText(this.uiContext.getString(e)), t } }, { key: "createStep2Title", value: function () { var t = new E; t.className = "".concat("xmui-totp-form", "_step"); var e = this.challengeType === com.ts.mobile.sdk.TotpChallengeFormatType.QrCode ? W.ts_authenticator_totp_qrcode_challenge_step2_message : W.ts_authenticator_totp_code_challenge_step2_message; return t.setText(this.uiContext.getString(e)), t } }, { key: "createForm", value: function () { var t = new Jt; if (t.addClass("xmui-totp-form"), t.id = rn, t.appendChild(this.createSpacer()), null != this.challengeType) { var e = this.createStep1Title(), n = this.createChallenge(), i = this.createStep2Title(); t.appendChildren(e, this.createSpacer(), n, this.createSpacer(), i, this.createSpacer()) } var o = new P; o.className = "".concat("xmui-totp-form", "_input"); var s = new $t(Dt.Text, H.input_totp_code); return s.name = "totp-code", s.value = "", s.placeholder = this.uiContext.getString(W.ts_authenticator_totp_input_hint), s.onChange(this.handleTotpCodeChanged.bind(this)), s.focus(), o.appendChild(s), this.totpCodeInput = s, t.appendChild(o), t.appendChild(this.createSpacer()), t } }]), n }(), un = function (t) { function n(t, i) { return e(this, n), u(this, a(n).call(this, t, i)) } return s(n, Mt), i(n, [{ key: "setAvailableTargets", value: function (t) { this.availableTargets = t } }, { key: "setTargetDevices", value: function (t) { this.targetDevices = t } }, { key: "setChallenge", value: function (t) { this.challenge = this.getChallenge(t) } }, { key: "showAuthUi", value: function () { this.availableTargets && !this.targetDevices ? this.showTargetSelectionUi() : this.showCodeInputUi() } }, { key: "promiseRecoveryForError", value: function (t, e, i) { if (t.getErrorCode() == com.ts.mobile.sdk.AuthenticationErrorCode.InvalidInput && e.indexOf(com.ts.mobile.sdk.AuthenticationErrorRecovery.RetryAuthenticator) > -1 && t.getPublicSymbolicProperty(com.ts.mobile.sdk.AuthenticationErrorProperty.AuthenticatorInvalidInputErrorDescription) == com.ts.mobile.sdk.AuthenticationErrorPropertySymbol.AuthenticatorInvalidInputErrorDescriptionTotpIncorrectCheckDigit) return St.log("Totp authentication failed due to invalid check-digit, starting recovery"), this.inputError = "Typing error detected - retype code", Promise.resolve(com.ts.mobile.sdk.AuthenticationErrorRecovery.RetryAuthenticator); return _(a(n.prototype), "promiseRecoveryForError", this).call(this, t, e, i) } }, { key: "showTargetSelectionUi", value: function () { var t = this, e = this.uiContext, n = new re(this.actionContext); n.setTitle(e.getString(W.ts_authenticator_totp_title)), n.setInstructions(e.getString(W.ts_authenticator_totp_targets_intro)); var i = {}; this.availableTargets.forEach((function (e) { var o = e.getDeviceDetails(), s = o.getDeviceId(), a = yt.getDeviceNameFromDeviceDetails(o), r = yt.getLastAccessedFromDeviceDetails(t.uiContext, o); i[s] = e, n.addDevice(s, a, r, !1) })), n.onSubmit((function (e) { n.blockInteraction(); var o = e.map((function (t) { return i[t] })), s = yt.createTargetsSelectionResponse(o); t.resolveInputPromise(s) })), this.showAuthenticatorPage(n) } }, { key: "showCodeInputUi", value: function () { var t = this, e = new cn(this.actionContext, this.challenge.type, this.challenge.value); this.inputError && e.setError(this.inputError), e.onSubmit((function (n) { e.blockInteraction(); var i = com.ts.mobile.sdk.impl.TotpInputCodeSubmissionImpl.createTotpCodeSubmission(n), o = com.ts.mobile.sdk.TargetBasedAuthenticatorInput.createAuthenticatorInput(i); t.resolveInputPromise(com.ts.mobile.sdk.InputOrControlResponse.createInputResponse(o)) })), this.showAuthenticatorPage(e) } }, { key: "showRegUi", value: function () { throw new Error("Method not implemented.") } }, { key: "getChallenge", value: function (t) { var e = { type: null, value: null }; if (t) switch (e.type = t.getFormat().getType(), e.type) { case com.ts.mobile.sdk.TotpChallengeFormatType.AlphaNumeric: case com.ts.mobile.sdk.TotpChallengeFormatType.Numeric: e.value = t.getValue(); break; case com.ts.mobile.sdk.TotpChallengeFormatType.QrCode: e.value = "data:image/jpeg;base64," + t.getValue() }return e } }]), n }(), ln = "xmui-ticket-wait-page", _n = function (t) { function n(t, i, o, s) { var r; e(this, n), r = u(this, a(n).call(this, H.page_ticket_wait, ln, t)), d(a(n.prototype), "busy", !0, c(r), !0); var l = r.createContent(i, o, s); return r.setContent(l), r } return s(n, dt), i(n, [{ key: "createSpacer", value: function () { var t = new P; return t.className = "".concat("xmui-ticket-wait", "_spacer"), t } }, { key: "createMessage", value: function (t) { var e = new E; return e.setText(t), e.className = "".concat("xmui-ticket-wait", "_message"), e } }, { key: "createContent", value: function (t, e, n) { var i = new P; switch (i.className = "xmui-ticket-wait", i.appendChild(this.createSpacer()), e) { case com.ts.mobile.sdk.TicketIdFormat.Qr: var o = this.createMessage(t), s = new P; s.className = "".concat("xmui-ticket-wait", "_qr-code-container"); var a = new ce; a.src = n, a.className = "".concat("xmui-ticket-wait", "_qr-code"), s.appendChild(a), i.appendChildren(o, this.createSpacer(), s); break; default: var r = new P; r.className = "".concat("xmui-ticket-wait", "_icon ").concat(S.WaitForTicket); var c = this.createMessage(t); i.appendChildren(r, this.createSpacer(), c, this.createSpacer()) }return i } }, { key: "busy", set: function (t) { } }]), n }(), hn = function t() { e(this, t) }, dn = function () { function t() { e(this, t), this.pollingIntervalMillis = 3e3 } return i(t, [{ key: "setWaitingTicket", value: function (t) { this.ticket = this.getTicket(t) } }, { key: "startSession", value: function (t, e) { this.username = St.getUsernameFromClientContext(e), this.clientContext = e, this.actionContext = t } }, { key: "endSession", value: function () { this.abortPolling() } }, { key: "promiseInput", value: function () { var t = this; return this.ticket ? new Promise((function (e, n) { t.currentPromiseResolve = e, t.ticketWaitPage || t.createTicketWaitPage(), t.startPolling() })) : Promise.reject("TicketWaitSession: Failed build ticket info") } }, { key: "createTicketWaitPage", value: function () { var t = this, e = new _n(this.actionContext, this.ticket.instructions, this.ticket.format, this.ticket.value); this.username && e.setUserName(this.username), e.setTitle(this.ticket.title), e.onCancel((function () { t.resolve(yt.createCancelAuthenticatorRequest()), t.abortPolling() })), e.onEscape((function (e) { t.resolve(com.ts.mobile.sdk.InputOrControlResponse.createEscapeResponse(e, {})), t.abortPolling() })), St.renderPage(e, this.clientContext), this.ticketWaitPage = e } }, { key: "startPolling", value: function () { var t = this; this.pollingTimer = setTimeout((function () { t.resolve(com.ts.mobile.sdk.InputOrControlResponse.createInputResponse(com.ts.mobile.sdk.TicketWaitInput.createPollRequest())), t.pollingTimer = null }), this.pollingIntervalMillis) } }, { key: "abortPolling", value: function () { this.pollingTimer && (clearTimeout(this.pollingTimer), this.pollingTimer = null) } }, { key: "resolve", value: function (t) { this.currentPromiseResolve && this.currentPromiseResolve(t), this.currentPromiseResolve = null } }, { key: "getTicket", value: function (t) { var e = new hn; if (t) { e.title = t.getTitle(), e.instructions = t.getText(); var n = t.getTicketId(); if (n) switch (e.format = n.getFormat(), e.format) { case com.ts.mobile.sdk.TicketIdFormat.Qr: e.value = "data:image/jpeg;base64," + n.getValue(); break; default: throw e = null, St.log("Unsupported ticket ID format"), new Error("Unsupported ticket ID format") } } return e } }]), t }(), pn = "xmui-actions-menu-button", mn = "".concat(pn, "_menu-container"), gn = function (t) { function n(t) { var i; return e(this, n), (i = u(this, a(n).call(this))).actionsMenu = t, i.isOpen = !1, i.className = "".concat(pn, " ").concat(S.More), i.automationId = H.button_actions_list, i.menuContainer = new P, i.menuContainer.className = mn, i.menuContainer.appendChild(t), i.appendChild(i.menuContainer), i.onMousedown((function () { i.openMenu() })), i.handleMousedownEvent = i.handleMousedownEvent.bind(c(i)), i.handleWheelEvent = i.handleWheelEvent.bind(c(i)), i.handleActionSelection = i.handleActionSelection.bind(c(i)), i.handleResize = Nt(i.handleResize.bind(c(i)), 10, !1), t.onSelectionChanged(i.handleActionSelection), i.actionsMenu.onFocus(i.handleFocusEvent.bind(c(i))), i.actionsMenu.onBlur(i.handleBlurEvent.bind(c(i))), i.actionsMenu.onKeydown(i.handleKeydownEvent.bind(c(i))), i } return s(n, P), i(n, [{ key: "openMenu", value: function () { this.isOpen || (this.previousFocusedElement = document.activeElement, this.addClass("".concat(pn, "--open")), this.actionsMenu.clearSelection(), this.actionsMenu.clearActive(), this.actionsMenu.focus(), this.updateMenuPosition(), this.isOpen = !0) } }, { key: "updateMenuPosition", value: function () { var t = this.htmlElement.getBoundingClientRect(), e = t.left + t.width / 2, n = t.top + t.height / 2, i = this.menuContainer.htmlElement, o = window.getComputedStyle(i), s = parseInt(o.width), a = parseInt(o.height), r = window.innerHeight - n - a, c = r < 0 ? r : 0; i.style.left = e - s + "px", i.style.top = n + c + "px" } }, { key: "closeMenu", value: function () { this.isOpen && (this.previousFocusedElement && this.previousFocusedElement.focus && this.previousFocusedElement.focus(), this.removeClass("".concat(pn, "--open")), window.removeEventListener("resize", this.handleResize), document.removeEventListener("mousedown", this.handleMousedownEvent), document.removeEventListener("wheel", this.handleWheelEvent), this.isOpen = !1) } }, { key: "handleFocusEvent", value: function (t) { window.addEventListener("resize", this.handleResize), document.addEventListener("mousedown", this.handleMousedownEvent), document.addEventListener("wheel", this.handleWheelEvent) } }, { key: "handleBlurEvent", value: function (t) { this.actionsMenu.htmlElement.contains(document.activeElement) || (this.previousFocusedElement = null, this.closeMenu()) } }, { key: "handleKeydownEvent", value: function (t, e) { e.keyCode === Q.Escape && this.closeMenu() } }, { key: "handleMousedownEvent", value: function (t) { this.closeMenu() } }, { key: "handleResize", value: function () { this.closeMenu() } }, { key: "handleWheelEvent", value: function () { this.closeMenu() } }, { key: "handleActionSelection", value: function () { this.closeMenu() } }]), n }(), vn = "xmui-text-state", fn = function (t) { function n() { var t; return e(this, n), (t = u(this, a(n).call(this))).className = vn, t } return s(n, E), n }(), yn = "xmui-authenticator-configuration-page", kn = function (t) { function n(t) { var i; e(this, n), (i = u(this, a(n).call(this, H.page_configure_authenticators, yn))).uiContext = t, i.keyToActionMenuButton = {}, i.setTitle(t.getString(W.ts_session_config_title)); var o = new ht(H.button_cancel); o.label = t.getString(W.ts_gen_cancel), o.onClick((function () { i.onCancelCB && i.onCancelCB() })), i.addLeftButton(o); var s = i.createContent(); return i.setContent(s), i } return s(n, U), i(n, [{ key: "createContent", value: function () { var t = this; return this.authList = new st(X.None), this.authList.onItemClicked((function (e) { var n = t.keyToActionMenuButton[e]; n && n.openMenu() })), this.authList.focus(), this.authList } }, { key: "getDefaultState", value: function () { var t = new fn; return t.setText(this.uiContext.getString(W.ts_gen_default)), t } }, { key: "addAuthenticator", value: function (t, e, n, i, o, s, a) { var r = ct.getAuthenticatorIcon(i) || ct.getAuthenticatorIcon(com.ts.mobile.sdk.AuthenticatorType.Generic), c = s ? [this.getDefaultState()] : null, u = a ? [S.Registered] : null, l = new gn(o); this.keyToActionMenuButton[t] = l; var _ = new rt(e, n, r, l, c, u); this.authList.addListItem(t, !1, _) } }, { key: "onCancel", value: function (t) { this.onCancelCB = t } }]), n }(), Cn = "xmui-actions-menu", bn = function (t) { function n() { var t; return e(this, n), (t = u(this, a(n).call(this, X.SingleMouseup, !0))).className = Cn, t.automationId = H.list_actions, t.tabindex = -1, t.role = "menu", t } return s(n, it), i(n, [{ key: "addAction", value: function (t) { var e = new E; e.id = Y.generate(), e.className = "".concat(Cn, "_action"), e.key = t.key, e.setText(t.label), this.addItem(e), this.role = "menuitem", this.selected = !1, this.disabled = !1 } }]), n }(); !function (t) { t[t.Register = 0] = "Register", t[t.Unregister = 1] = "Unregister", t[t.Reregister = 2] = "Reregister", t[t.SetDefault = 3] = "SetDefault" }(on || (on = {})); var wn = (o(en = {}, on.Register, W.ts_session_config_item_action_register), o(en, on.Unregister, W.ts_session_config_item_action_unregister), o(en, on.Reregister, W.ts_session_config_item_action_reregister), o(en, on.SetDefault, W.ts_session_config_item_action_set_as_default), en), xn = (o(nn = {}, on.Register, W.ts_session_config_item_register_failed), o(nn, on.Unregister, W.ts_session_config_item_unregister_failed), o(nn, on.Reregister, W.ts_session_config_item_reregister_failed), o(nn, on.SetDefault, W.ts_session_config_item_default_failed), nn), Sn = function () { function t(n) { var i; e(this, t), this.username = n, this.actionTypeToEMenuAction = (o(i = {}, com.ts.mobile.sdk.AuthenticatorConfigurationAction.Register, on.Register), o(i, com.ts.mobile.sdk.AuthenticatorConfigurationAction.Unregister, on.Unregister), o(i, com.ts.mobile.sdk.AuthenticatorConfigurationAction.Reregister, on.Reregister), i) } return i(t, [{ key: "setAuthenticatorsList", value: function (t) { var e = this, n = this.uiContext, i = new kn(n); i.setInstructions(this.instructions || n.getString(W.ts_session_config_intro)), i.setUserName(this.username), t.forEach((function (t) { var o = t.getDescription(), s = o.getAuthenticatorId(), a = n.getString(bt.getAuthenticatorNameKey(s)), r = n.getString(bt.getAuthenticatorDescriptionKey(s)), c = o.getType(), u = t.getAvailableActions(), l = o.getDefaultAuthenticator(), _ = o.getRegistered(), h = e.buildActionsMenu(u, l); h.onSelectionChanged(e.handleAction.bind(e, t)), i.addAuthenticator(s, a, r, c, h, l, _) })), i.onCancel((function () { e.configServices.finishSession() })), St.renderPage(i, this.clientContext) } }, { key: "startSession", value: function (t, e, n) { this.username = St.getUsernameFromClientContext(n) || this.username, this.configServices = t, this.actionContext = e, this.clientContext = n, this.uiContext = t.getUiContext(), this.instructions = null, St.log("Starting configuration session") } }, { key: "endSession", value: function () { St.log("Ending configuration session") } }, { key: "buildActionsMenu", value: function (t, e) { var n = this, i = new bn; return t.forEach((function (t) { i.addAction({ key: n.actionTypeToEMenuAction[t].toString(), label: n.uiContext.getString(wn[n.actionTypeToEMenuAction[t]]) }) })), e || i.addAction({ key: on.SetDefault.toString(), label: this.uiContext.getString(wn[on.SetDefault]) }), i } }, { key: "handleAction", value: function (t, e) { var n, i = this, o = parseInt(e); switch (o) { case on.SetDefault: n = this.handleSetDefault(t); break; case on.Register: n = this.handleRegister(t); break; case on.Reregister: n = this.handleReregister(t); break; case on.Unregister: n = this.handleUnregister(t) }n.then((function () { return i.configServices.requestRefreshAuthenticators() })).catch((function (e) { if (e && e.getErrorCode && e.getErrorCode() === com.ts.mobile.sdk.AuthenticationErrorCode.UserCanceled) i.configServices.requestRefreshAuthenticators(); else { var n = t.getDescription().getAuthenticatorId(), s = i.uiContext.getString(bt.getAuthenticatorNameKey(n)), a = "fido2" !== n && e.getMessage ? e.getMessage() : "", r = i.uiContext.formatString(xn[o], [s, a]); i.presentError(e, r) } })) } }, { key: "setSuccessMessage", value: function (t, e) { var n = this.uiContext, i = t.getDescription().getAuthenticatorId(), o = n.getString(bt.getAuthenticatorNameKey(i)); this.instructions = n.formatString(e, [o]) } }, { key: "handleSetDefault", value: function (t) { var e = this; return this.configServices.setDefaultAuthenticator(t).then((function (n) { return e.setSuccessMessage(t, e.uiContext.getString(W.ts_session_config_item_default_result)), n })) } }, { key: "handleReregister", value: function (t) { var e = this; return this.configServices.reregisterAuthenticator(t, this.clientContext).then((function () { return e.configServices.setDefaultAuthenticator(t).then((function (n) { return e.setSuccessMessage(t, e.uiContext.getString(W.ts_session_config_item_reregister_result)), n })) })) } }, { key: "handleRegister", value: function (t) { var e = this; return this.configServices.registerAuthenticator(t, this.clientContext).then((function () { return e.configServices.setDefaultAuthenticator(t).then((function (n) { return e.setSuccessMessage(t, e.uiContext.getString(W.ts_session_config_item_register_result)), n })) })) } }, { key: "handleUnregister", value: function (t) { var e = this; return new Promise((function (n, i) { var o = e.uiContext; e.setSuccessMessage(t, o.getString(W.ts_session_config_item_unregister_result)); var s = t.getDescription().getAuthenticatorId(), a = o.getString(bt.getAuthenticatorNameKey(s)), r = o.getString(W.ts_session_config_item_unregister_dialog_cta), c = o.getString(W.ts_gen_cancel), u = new Rt(o, r, c); e.username && u.setUserName(e.username), u.setDialogTitle(o.getString(W.ts_session_config_item_unregister_dialog_title)), u.setDialogMessage(o.formatString(W.ts_session_config_item_unregister_dialog_message, [a])), u.setDialogIconClass(S.Unregister), u.onSelect((function (o) { u.blockInteraction(), o ? e.configServices.unregisterAuthenticator(t, e.clientContext).then(n, i) : n(!0) })), St.renderPage(u, e.clientContext) })) } }, { key: "presentError", value: function (t, e) { var n = this; this.instructions = null, Pt.promiseInformationInput(this.username, S.Information, this.uiContext.getString(W.ts_session_config_error_dialog_title), e, this.uiContext.getString(W.ts_gen_continue), this.uiContext, this.clientContext).then((function () { t.getErrorCode() == com.ts.mobile.sdk.AuthenticationErrorCode.PolicyRejection ? n.configServices.finishSession() : n.configServices.requestRefreshAuthenticators() })) } }]), t }(), In = "xmui-registration-promotion-introduction-page", En = function (t) { function n(t, i, o, s, r) { var c; e(this, n), (c = u(this, a(n).call(this, H.dialog_registration_promotion_intro, In, t, !0, i, o, S.Promotion))).cancelButton.label = r, c.cancelButton.automationId = H.button_abort; var l = new ht(H.button_skip); l.label = t.getUiContext().getString(W.ts_session_promotion_skip), l.onClick((function () { return c.onSkipCB && c.onSkipCB() })), c.addRightButton(l); var _ = new ht(H.button_continue); return _.label = s, _.onClick((function () { return c.onContinueCB && c.onContinueCB() })), c.addRightButton(_), c } return s(n, It), i(n, [{ key: "onContinue", value: function (t) { this.onContinueCB = t } }, { key: "onSkip", value: function (t) { this.onSkipCB = t } }]), n }(), An = function () { function t(n, i) { e(this, t), this.username = n, this.actionContext = i } return i(t, [{ key: "startSession", value: function (t, e) { this.username = St.getUsernameFromClientContext(t) || this.username, this.clientContext = t, this.uiContext = e.getUiContext(), St.log("Starting registration promotion action session") } }, { key: "endSession", value: function () { St.log("Ending registration promotion action session") } }, { key: "promptIntroduction", value: function (t, e, n, i) { var o = this; return new Promise((function (s, a) { var r = new En(o.actionContext, t, e, n, i); r.setUserName(o.username); var c = com.ts.mobile.sdk.PromotionControlRequest; r.onContinue((function () { s(com.ts.mobile.sdk.PromotionInput.createControlResponse(c.Continue)) })), r.onSkip((function () { s(com.ts.mobile.sdk.PromotionInput.createControlResponse(c.Skip)) })), r.onCancel((function () { s(com.ts.mobile.sdk.PromotionInput.createControlResponse(c.Abort)) })), r.onEscape((function (t) { s(com.ts.mobile.sdk.PromotionInput.createEscapeRequest(t, {})) })), St.renderPage(r, o.clientContext) })) } }, { key: "setPromotedAuthenticators", value: function (t) { var e = this, n = this.uiContext, i = com.ts.mobile.sdk.PromotionControlRequest; return new Promise((function (o, s) { var a = {}, r = new mt(e.actionContext); r.setUserName(e.username), r.setTitle(n.getString(W.ts_session_promotion_title)), r.setInstructions(n.getString(W.ts_session_promotion_intro)), t.forEach((function (t) { var e = t.getAuthenticatorId(), i = t.getType(); a[e] = t; var o = n.getString(bt.getAuthenticatorNameKey(e)); r.addAuthenticator(e, o, i, !1) })), r.onSubmit((function (t) { r.blockInteraction(), o(com.ts.mobile.sdk.PromotionInput.createAuthenticatorDescription(a[t])) })), r.onEscape((function (t) { r.blockInteraction(), o(com.ts.mobile.sdk.PromotionInput.createEscapeRequest(t, {})) })), r.cancelButton.label = n.getString(W.ts_session_promotion_abort), r.automationId = H.button_abort, r.onCancel((function () { r.blockInteraction(), o(com.ts.mobile.sdk.PromotionInput.createControlResponse(i.Abort)) })); var c = new ht(H.button_skip); c.label = n.getString(W.ts_session_promotion_skip), c.onClick((function () { r.blockInteraction(), o(com.ts.mobile.sdk.PromotionInput.createControlResponse(i.Skip)) })), r.addRightButton(c), St.renderPage(r, e.clientContext) })) } }]), t }(), Pn = "xmui-select-device-to-manage", Tn = function (t) { function n(t) { var i; e(this, n), (i = u(this, a(n).call(this, H.page_select_device_to_manage, Pn))).uiContext = t, i.setTitle(t.getString(W.ts_session_dm_title)), i.setInstructions(t.getString(W.ts_session_dm_details_subtitle)); var o = new ht(H.button_back); o.label = t.getString(W.ts_gen_close), o.onClick((function () { i.onBackCB && i.onBackCB() })), i.addLeftButton(o); var s = i.createContent(); return i.setContent(s), i } return s(n, U), i(n, [{ key: "createContent", value: function () { var t = this; return this.deviceList = new st(X.Single), this.deviceList.onSelectionChanged((function (e) { e.length && t.onSelectCB && t.onSelectCB(e[0]) })), this.deviceList.focus(), this.deviceList } }, { key: "getCurrentDeviceState", value: function () { var t = new fn; return t.setText(this.uiContext.getString(W.ts_session_dm_details_current_device)), t } }, { key: "addDevice", value: function (t, e, n, i, o) { var s = new P; s.className = "".concat(Pn, "_expand-icon ").concat(S.Expand); var a = i ? [this.getCurrentDeviceState()] : null, r = new rt(e, n, o, s, a); this.deviceList.addListItem(t, !1, r) } }, { key: "onSelect", value: function (t) { this.onSelectCB = t } }, { key: "onBack", value: function (t) { this.onBackCB = t } }]), n }(), Rn = "".concat("xmui-manage-device", "_row"), Mn = "".concat("xmui-manage-device", "_info"), Bn = "".concat("xmui-manage-device", "_separator"), Nn = "".concat("xmui-manage-device", "_name"), Dn = "".concat("xmui-manage-device", "_spacer"), Ln = "xmui-device-management-page", Fn = function (t) { function n(t) { var i; e(this, n), (i = u(this, a(n).call(this, H.page_manage_devices, Ln))).uiContext = t, i.setTitle(t.getString(W.ts_session_dm_details_title)), i.setInstructions(t.getString(W.ts_session_dm_details_subtitle)); var o = new ht(H.button_cancel); return o.label = t.getString(W.ts_gen_back), o.onClick((function () { i.onCancelCB && i.onCancelCB() })), o.focus(), i.addLeftButton(o), i.handleAction = i.handleAction.bind(c(i)), i } return s(n, U), i(n, [{ key: "setDevice", value: function (t, e, n, i, o, s) { var a = this.uiContext, r = new P; r.className = "xmui-manage-device"; var c = new P; c.className = Rn; var u = new E; if (u.setText(t), u.className = Nn, c.appendChild(u), o) { var l = new fn; l.setText(this.uiContext.getString(W.ts_session_dm_section_current)), c.appendChild(l) } if (s.indexOf(com.ts.mobile.sdk.DeviceManagementAction.Rename) > -1) { var _ = new P; _.className = Dn; var h = new ht(H.button_rename); h.label = a.getString(W.ts_session_dm_details_rename_action), h.value = com.ts.mobile.sdk.DeviceManagementAction.Rename, h.onClick(this.handleAction), c.appendChildren(_, h) } var d = new E; d.setText(e + "\n" + n + "\n" + i), d.className = Mn; var p = new P; if (p.className = Rn, p.appendChildren(d), r.appendChildren(c, p), (new P).className = Bn, s.indexOf(com.ts.mobile.sdk.DeviceManagementAction.Identify) > -1) { var m = new P; m.className = Bn, r.appendChild(m); var g = new P; g.className = Rn; var v = new E; v.setText(a.getString(W.ts_session_dm_details_push_subtitle)), v.className = Mn; var f = new ht(H.button_rename); f.label = a.getString(W.ts_session_dm_details_push_action), f.value = com.ts.mobile.sdk.DeviceManagementAction.Identify, f.onClick(this.handleAction), g.appendChildren(v, f), r.appendChild(g) } if (o || s.indexOf(com.ts.mobile.sdk.DeviceManagementAction.Remove) > -1) { var y = new P; y.className = Bn, r.appendChild(y); var k = new P; k.className = Rn; var C = new E; C.setText(a.getString(W.ts_session_dm_details_remove_subtitle)), C.className = Mn; var b = new ht(H.button_remove, !0); b.label = a.getString(W.ts_session_dm_details_remove_action), b.value = com.ts.mobile.sdk.DeviceManagementAction.Remove, b.onClick(this.handleAction), k.appendChildren(C, b), r.appendChild(k) } this.setContent(r) } }, { key: "onAction", value: function (t) { this.onActionCB = t } }, { key: "onCancel", value: function (t) { this.onCancelCB = t } }, { key: "handleAction", value: function (t) { this.onActionCB && this.onActionCB(t.value) } }]), n }(), qn = ["input", "select", "textarea", "a[href]", "button", "[tabindex]", "audio[controls]", "video[controls]", '[contenteditable]:not([contenteditable="false"])']; function On(t) { return null === t.offsetParent || "hidden" === getComputedStyle(t).visibility } function jn(t) { for (var e = t.querySelectorAll(qn.join(",")), n = [], i = 0; i < e.length; i++) { var o = e[i]; Un(o) > -1 && !o.disabled && !On(o) && n.push(o) } return n } function Un(t) { var e = parseInt(t.getAttribute("tabindex"), 10); return isNaN(e) ? function (t) { return "true" === t.contentEditable }(t) ? 0 : t.tabIndex : e } var Hn, Qn = "xmui-popup-dialog", Kn = function (t) { function n() { var t; e(this, n), (t = u(this, a(n).call(this))).className = Qn; var i = new P; return i.className = "".concat(Qn, "_overlay"), t.panel = new P, t.panel.className = "".concat(Qn, "_panel"), t.appendChildren(i, t.panel), t.handleKeydownEvent = t.handleKeydownEvent.bind(c(t)), t.headerPanel = new D(!0), t.headerPanel.show = !1, t.panel.appendChild(t.headerPanel), t.contentContainer = new P, t.contentContainer.className = "".concat(Qn, "_content"), t.actionPanel = new F(!0), t.panel.appendChildren(t.contentContainer, t.actionPanel), t } return s(n, P), i(n, [{ key: "setTitle", value: function (t) { this.headerPanel.show = !0, this.headerPanel.setText(t) } }, { key: "setIcon", value: function (t) { this.headerPanel.show = !0, this.headerPanel.setIcon(t) } }, { key: "setContent", value: function (t) { this.contentContainer.appendChild(t) } }, { key: "addLeftButton", value: function (t) { this.actionPanel.addLeftButton(t) } }, { key: "addRightButton", value: function (t) { this.actionPanel.addRightButton(t) } }, { key: "appendInto", value: function (t) { _(a(n.prototype), "appendInto", this).call(this, t), document.addEventListener("keydown", this.handleKeydownEvent) } }, { key: "close", value: function () { document.removeEventListener("keydown", this.handleKeydownEvent), this.remove() } }, { key: "handleKeydownEvent", value: function (t) { !function (t, e) { var n, i = (n = jn(e))[0], o = n[n.length - 1]; "Tab" === t.key ? e.contains(t.target) ? t.shiftKey && t.target === i ? (o.focus(), t.preventDefault()) : t.shiftKey || t.target !== o || (i.focus(), t.preventDefault()) : ((i = (n = jn(e))[0]).focus(), t.preventDefault()) : e.contains(t.target) || t.preventDefault() }(t, this.panel.htmlElement) } }]), n }(), Vn = "xmui-confirm-popup-dialog", zn = function (t) { function n(t, i, o) { var s, r = arguments.length > 3 && void 0 !== arguments[3] && arguments[3]; e(this, n), (s = u(this, a(n).call(this))).automationId = H.popup_dialog_confirm, s.handleClick = s.handleClick.bind(c(s)); var l = new ht(H.button_cancel); l.label = o || t.getString(W.ts_gen_cancel), l.value = !1, l.onClick(s.handleClick), s.addLeftButton(l); var _ = new ht(H.button_continue); _.label = i || t.getString(W.ts_authenticator_password_cta_positive), _.value = !0, _.onClick(s.handleClick), s.addRightButton(_); var h = new P; return h.className = "".concat(Vn, "_container"), s.messageComp = new E, s.messageComp.className = "".concat(Vn, "_message"), h.appendChild(s.messageComp), s.setContent(h), r ? _.focus() : l.focus(), s } return s(n, Kn), i(n, [{ key: "setMessage", value: function (t) { this.messageComp.setText(t) } }, { key: "onSelect", value: function (t) { this.onSelectCB = t } }, { key: "handleClick", value: function (t) { this.onSelectCB(t.value) } }]), n }(), Wn = "xmui-input-popup-dialog", Zn = "xmui-text-input-form", Yn = function (t) { function n(t, i, o) { var s; e(this, n), (s = u(this, a(n).call(this))).addClass(Wn), s.automationId = H.popup_dialog_confirm; var r = new ht(H.button_cancel); r.label = o || t.getString(W.ts_gen_cancel), r.value = !1, r.onClick((function () { s.onCancelCB && s.onCancelCB() })), s.addLeftButton(r); var c = new ht(H.button_continue); c.label = i || t.getString(W.ts_authenticator_password_cta_positive), c.value = !0, c.type = nt.Submit, c.disabled = !0, c.onClick((function () { s.onSubmitCB && s.onSubmitCB(s.inputField.value) })), c.form = Zn, s.addRightButton(c), s.confirmButton = c; var l = s.buildContent(); return s.setContent(l), s } return s(n, Kn), i(n, [{ key: "setPlacehoder", value: function (t) { this.inputField.placeholder = t } }, { key: "onSubmit", value: function (t) { this.onSubmitCB = t } }, { key: "onCancel", value: function (t) { this.onCancelCB = t } }, { key: "buildContent", value: function () { var t = this, e = new Jt; e.id = Zn; var n = new $t(Dt.Text, H.input_text); return n.disabled = !1, n.value = "", n.onChange((function () { t.confirmButton.disabled = null == t.inputField.value || 0 === t.inputField.value.length })), n.focus(), this.inputField = n, e.appendChild(n), e } }]), n }(), $n = function () { function t(n) { var i; e(this, t), this.username = n, this.actionToError = (o(i = {}, com.ts.mobile.sdk.DeviceManagementAction.Remove, W.ts_session_dm_item_action_remove_result_negative), o(i, com.ts.mobile.sdk.DeviceManagementAction.Rename, W.ts_session_dm_item_action_rename_result_negative), o(i, com.ts.mobile.sdk.DeviceManagementAction.Identify, W.ts_session_dm_item_action_identify_result_negative), i) } return i(t, [{ key: "setSessionDevicesList", value: function (t) { this.devices = t } }, { key: "startSession", value: function (t, e, n) { this.username = St.getUsernameFromClientContext(n) || this.username, this.deviceManagementSessionService = t, this.actionContext = e, this.clientContext = n, this.uiContext = t.getUiContext(), this.instructions = null, St.log("Starting device management session"), this.openSelectDeviceToManage() } }, { key: "endSession", value: function () { St.log("Ending device management session") } }, { key: "handleRemove", value: function (t) { var e = this, n = this.uiContext; return new Promise((function (i, o) { var s = e.getDeviceName(t), a = new zn(n, n.getString(W.ts_session_dm_item_action_dialog_remove_cta)); a.setTitle(n.formatString(W.ts_session_dm_item_action_dialog_remove_title, [s])), a.setIcon(S.Remove), a.setMessage(n.getString(W.ts_session_dm_item_action_dialog_remove_message)), a.onSelect((function (n) { if (a.close(), n) if (t.getInfo().getIsCurrent()) { var o = e.deviceManagementSessionService.removeCurrentDeviceAndFinishSession(e.clientContext).then((function (t) { return t && e.setSuccessMessage(W.ts_session_dm_item_action_remove_result_positive, s), t })); i(o) } else i(e.deviceManagementSessionService.removeDevice(t, e.clientContext)); else i(!1) })), St.renderModal(a, e.clientContext) })) } }, { key: "handleRename", value: function (t) { var e = this, n = this.uiContext; return new Promise((function (i, o) { var s = e.getDeviceName(t), a = new Yn(n, n.getString(W.ts_session_dm_item_action_dialog_rename_cta)); a.setTitle(n.formatString(W.ts_session_dm_item_action_dialog_rename_title, [s])), a.setIcon(S.Rename), a.setPlacehoder(n.getString(W.ts_session_dm_details_rename_input_hint)), a.onCancel((function () { a.close(), i(!1) })), a.onSubmit((function (n) { a.close(); var o = e.deviceManagementSessionService.renameDevice(t, n, e.clientContext).then((function (t) { return t && e.setSuccessMessage(W.ts_session_dm_item_action_rename_result_positive, s, n), t })); i(o) })), St.renderModal(a, e.clientContext) })) } }, { key: "handleIdentify", value: function (t) { var e = this; return this.deviceManagementSessionService.identifyDevice(t, this.clientContext).then((function (n) { var i = e.getDeviceName(t); return n && e.setSuccessMessage(W.ts_session_dm_item_action_identify_result_positive, i), n })) } }, { key: "handleAction", value: function (t, e) { var n, i = this; switch (e) { case com.ts.mobile.sdk.DeviceManagementAction.Remove: n = this.handleRemove(t); break; case com.ts.mobile.sdk.DeviceManagementAction.Rename: n = this.handleRename(t); break; case com.ts.mobile.sdk.DeviceManagementAction.Identify: n = this.handleIdentify(t) }n && n.then((function () { i.requestSelectDeviceToManage() })).catch((function (n) { var o = i.getDeviceName(t), s = i.uiContext.formatString(i.actionToError[e], [o, n.getMessage()]); i.handleError(n, s) })) } }, { key: "setSuccessMessage", value: function (t, e, n) { this.instructions = this.uiContext.formatString(t, [e, n]) } }, { key: "handleError", value: function (t, e) { var n = this; this.instructions = null, Pt.promiseInformationInput(this.username, S.Information, this.uiContext.getString(W.ts_session_dm_error_dialog_title), e, this.uiContext.getString(W.ts_gen_continue), this.uiContext, this.clientContext).then((function () { t.getErrorCode() == com.ts.mobile.sdk.AuthenticationErrorCode.PolicyRejection ? n.deviceManagementSessionService.finishSession() : n.requestSelectDeviceToManage() })) } }, { key: "handleCancel", value: function () { this.requestSelectDeviceToManage() } }, { key: "requestSelectDeviceToManage", value: function () { var t = this; this.deviceManagementSessionService.requestRefreshDevices().then((function () { return t.openSelectDeviceToManage() })) } }, { key: "openManageDevice", value: function (t) { var e = t.getInfo(), n = t.getAvailableActions(), i = this.getDeviceName(t), o = this.getDeviceOS(t), s = this.getLastAccessed(t), a = this.getAddedOn(t), r = e.getIsCurrent(), c = new Fn(this.uiContext); c.setUserName(this.username), c.setDevice(i, o, s, a, r, n), c.onAction(this.handleAction.bind(this, t)), c.onCancel(this.handleCancel.bind(this)), St.renderPage(c, this.clientContext) } }, { key: "openSelectDeviceToManage", value: function () { var t = this, e = {}, n = new Tn(this.uiContext); n.setUserName(this.username), this.instructions && n.setInstructions(this.instructions), this.devices.forEach((function (i) { var o = i.getInfo(), s = o.getDeviceId(), a = t.getDeviceName(i), r = t.getLastAccessed(i), c = o.getIsCurrent(); e[s] = i, n.addDevice(s, a, r, c, S.WebBrowser) })), n.onSelect((function (n) { t.instructions = null, t.openManageDevice(e[n]) })), n.onBack((function () { t.instructions = null, t.deviceManagementSessionService.finishSession() })), St.renderPage(n, this.clientContext) } }, { key: "getDeviceName", value: function (t) { var e = t.getInfo(), n = e.getName(); return yt.getDeviceName(n, e) } }, { key: "getDeviceOS", value: function (t) { var e = t.getInfo(); return "".concat(e.getOsType(), "  ").concat(e.getOsVersion()) } }, { key: "getLastAccessed", value: function (t) { var e = new Date(t.getInfo().getLastAccess()).toLocaleString(); return this.uiContext.formatString(W.ts_session_dm_last_used_date, [e]) } }, { key: "getAddedOn", value: function (t) { var e = new Date(t.getInfo().getRegistered()).toLocaleString(); return this.uiContext.formatString(W.ts_session_dm_added_at, [e]) } }]), t }(); !function (t) { t.Text = "text", t.Email = "email", t.MobileNumber = "phone" }(Hn || (Hn = {})); var Gn, Xn = "xmui-mobile-phone-input", Jn = "".concat(Xn, "_separator"), ti = "".concat(Xn, "_plus"), ei = "".concat(Xn, "_country-code-container"), ni = "-", ii = "+", oi = function (t) { function n() { var t, i = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "", o = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : ""; e(this, n), (t = u(this, a(n).call(this, Dt.PositiveInteger, H.input_mobile_phone_number))).addClass(Xn); var s = new E(ni); s.className = Jn, t.prependToInputRow(s); var r = new P; r.className = ei; var l = new Lt(H.input_mobile_phone_coutry_code); l.type = "text", l.maxlength = 3, l.onKeypress((function (t, e) { return Qt.positiveInteger(e) })), l.onPaste(t.handlePaste.bind(c(t))), l.onChange(t.handleChange.bind(c(t))), r.appendChild(l), t.prependToInputRow(r); var _ = new E(ii); return _.className = ti, t.prependToInputRow(_), t.countryCodeInput = l, t.addValidator(Ht.mobileNumber), t.value = "".concat(i).concat(ni).concat(o), t } return s(n, $t), i(n, [{ key: "getRequiredValidator", value: function () { return function (t) { var e = t.replace(ni, ""); return Ht.required(e) } } }, { key: "checkHasValue", value: function () { return !!this.value.replace(ni, "").length } }, { key: "isEmpty", get: function () { return !this.value.trim().replace(ni, "").length } }, { key: "value", set: function (t) { var e = t.length && t.split(ni); e && 2 === e.length && (this.countryCodeInput.value = e[0], d(a(n.prototype), "value", e[1], this, !0)) }, get: function () { return "".concat(this.countryCodeInput.value).concat(ni).concat(_(a(n.prototype), "value", this)) } }, { key: "countryCode", get: function () { return this.countryCodeInput.value } }, { key: "number", get: function () { return _(a(n.prototype), "value", this) } }]), n }(), si = "xmui-dynamic-mobile-phone-input", ai = function (t) { function n(t) { var i; e(this, n), (i = u(this, a(n).call(this))).addClass(si); var o = t.value && t.value.country_code || "", s = t.value && t.value.number || "", r = new oi(o, s); return r.name = t.id, r.message = t.hint ? t.hint : "", r.required = !0 === t.mandatory, r.placeholder = r.required ? t.name.trim() + " *" : t.name, i.appendChild(r), i.mobilePhoneInput = r, i } return s(n, Kt), i(n, [{ key: "validateAndSetErrorMessage", value: function () { return this.mobilePhoneInput.validateAndSetErrorMessage() } }, { key: "name", get: function () { return this.mobilePhoneInput.name } }, { key: "value", get: function () { return { country_code: this.mobilePhoneInput.countryCode, number: this.mobilePhoneInput.number } } }, { key: "required", get: function () { return this.mobilePhoneInput.required } }, { key: "isEmpty", get: function () { return this.mobilePhoneInput.isEmpty } }]), n }(), ri = function (t) { function n(t, i, o, s) { var r; return e(this, n), (r = u(this, a(n).call(this, t))).actions = s, r.id = i, r.name = o, r.buildActions(s), r } return s(n, Jt), i(n, [{ key: "buildActions", value: function (t) { var e = this; t.forEach((function (t) { var n = e.createInputField(t); e.appendChild(n) })) } }, { key: "createInputField", value: function (t) { var e, n, i; switch (t.type) { case Hn.Text: e = Dt.Text, i = new $t(e, H.input_text); break; case Hn.Email: e = Dt.Email, i = new $t(e, H.input_email), n = 254; break; case Hn.MobileNumber: return new ai(t); default: throw new Error("Unsupported form field type") }return i.name = t.id, i.message = t.hint ? t.hint : "", i.required = !0 === t.mandatory, i.placeholder = i.required ? t.name.trim() + " *" : t.name, t.value && (i.value = t.value), null != n && (i.maxlength = n), i } }]), n }(), ci = "xmui-dynamic-form-page", ui = function (t) { function n(t, i, o) { var s; e(this, n), (s = u(this, a(n).call(this, H.page_dynamic_form, ci, t))).formId = i, s.payload = o, s.setTitle(s.payload.title || s.formId), s.payload.subtitle && s.setInstructions(s.payload.subtitle); var r = s.createForm(); return s.setContent(r), s } return s(n, dt), i(n, [{ key: "onSubmit", value: function (t) { this.onSubmitCB = t } }, { key: "createForm", value: function () { var t = this, e = new ht(H.button_continue); e.label = this.uiContext.getString(W.ts_authenticator_password_cta_positive), this.addRightButton(e); var n = new ri(e, "xmui-dynamic-form", "xmui-dynamic-form", this.payload.actions); return n.onSubmit((function (e) { t.onSubmitCB && t.onSubmitCB({ type: t.payload.type, actions: e }) })), n.start(), n } }]), n }(); !function (t) { t[t.Init = 0] = "Init", t[t.Continue = 1] = "Continue", t[t.Error = 2] = "Error" }(Gn || (Gn = {})); var li = function () { function t(n, i) { e(this, t), this.formId = n, this.payload = i, this.state = Gn.Init } return i(t, [{ key: "startSession", value: function (t, e) { this.clientContext = t, this.actionContext = e } }, { key: "endSession", value: function () { } }, { key: "onContinue", value: function (t) { this.payload = t, this.state = Gn.Continue } }, { key: "onError", value: function (t) { this.payload = t, this.state = Gn.Error } }, { key: "promiseFormInput", value: function () { var t = this; return new Promise((function (e, n) { var i = new ui(t.actionContext, t.formId, t.payload), o = St.getUsernameFromClientContext(t.clientContext); o && i.setUserName(o), i.onSubmit((function (t) { e(com.ts.mobile.sdk.FormInput.createFormInputSubmissionRequest(t)) })), i.onCancel((function () { e(com.ts.mobile.sdk.FormInput.createFormCancellationRequest()) })), i.onEscape((function (t) { e(com.ts.mobile.sdk.FormInput.createEscapeRequest(t, {})) })), St.renderPage(i, t.clientContext) })) } }]), t }(), _i = function (t) { function n() { var t; return e(this, n), (t = u(this, a(n).call(this, Dt.Text, H.input_security_question))).answered = !1, t.onChange((function () { t.updateState(t.value) })), t } return s(n, $t), i(n, [{ key: "updateState", value: function (t) { this.answered !== !!t && (t ? this.addIcon(S.Checkmark) : this.removeIcon(S.Checkmark), this.answered = !!t) } }, { key: "value", set: function (t) { d(a(n.prototype), "value", t, this, !0), this.updateState(t) }, get: function () { return _(a(n.prototype), "value", this) } }]), n }(), hi = "xmui-security-questions-reg-page", di = "".concat("xmui-security-questions-reg-form", "_input-container"), pi = "".concat("xmui-security-questions-reg-form", "_progress-indication"), mi = "xmui-security-questions-reg-form", gi = function t(n, i) { e(this, t), this.question = n, this.input = i }, vi = function (t) { function n(t, i) { var o; e(this, n), (o = u(this, a(n).call(this, H.input_security_question, hi, t))).questions = i.getSecurityQuestions(), o.minimumAnswersNeeded = i.getMinAnswersNeeded(), o.setTitle(o.getTitle()), o.setInstructions(o.getInstructions()), o.content = o.createForm(), o.setContent(o.content); var s = new ht(H.button_continue); return s.label = o.uiContext.getString(W.ts_authenticator_password_cta_positive), s.type = nt.Submit, s.form = mi, s.onClick((function () { return o.onSubmitCB(o.collectUserAnswers()) })), o.addRightButton(s), o.continueButton = s, o.updateFormState(), o } return s(n, ee), i(n, [{ key: "setError", value: function (t) { this.error = !0, t && this.setInstructions(t) } }, { key: "onSubmit", value: function (t) { this.onSubmitCB = t } }, { key: "collectUserAnswers", value: function () { var t = Array(); return this.questionsAndAnswers.forEach((function (e) { var n = e.input.value.trim(); n && t.push(com.ts.mobile.sdk.SecurityQuestionAndAnswer.createAnswerToQuestion(e.question, com.ts.mobile.sdk.SecurityQuestionAnswer.createWithText(n))) })), t } }, { key: "updateFormState", value: function () { var t = this.countAnsweredQuestions(); this.updateUserProgress(t), this.updateSubmitButton(t) } }, { key: "updateSubmitButton", value: function (t) { this.continueButton.disabled = t < this.minimumAnswersNeeded } }, { key: "countAnsweredQuestions", value: function () { return this.questionsAndAnswers.reduce((function (t, e) { return e.input.value.trim() ? ++t : t }), 0) } }, { key: "updateUserProgress", value: function (t) { var e = this.uiContext.formatString(W.ts_authenticator_questions_left, [t.toString(), this.questions.length.toString()]); this.progressIndication.setText(e) } }, { key: "getTitle", value: function () { var t = W.ts_authenticator_questions_title_reg; return this.uiContext.getString(t) } }, { key: "getInstructions", value: function () { var t = W.ts_authenticator_questions_intro_reg; return this.uiContext.formatString(t, [this.minimumAnswersNeeded.toString(), this.questions.length.toString()]) } }, { key: "createForm", value: function () { var t = this; this.questionsAndAnswers = Array(); var e = new Jt; e.addClass("xmui-security-questions-reg-form"), e.id = mi; var n = new P; return n.className = di, this.questions.forEach((function (e) { var i = e.getSecurityQuestionText(), o = new _i; o.placeholder = i, o.ariaLabel = i, n.appendChild(o), t.questionsAndAnswers.push(new gi(e, o)) })), this.questionsAndAnswers[0].input.focus(), this.progressIndication = new E, this.progressIndication.className = pi, e.appendChildren(n, this.progressIndication), e.onUserInput(this.updateFormState.bind(this)), e } }]), n }(), fi = "xmui-answered-security-question", yi = function (t) { function n(t, i) { var o; e(this, n), (o = u(this, a(n).call(this))).className = fi; var s = new E, r = new E; return s.className = "".concat(fi, "_question"), r.className = "".concat(fi, "_answer"), s.setText(t), r.setText(i), o.appendChildren(s, r), o } return s(n, P), n }(), ki = "xmui-security-questions-auth-page", Ci = "xmui-security-questions-auth-form", bi = function (t) { function n(t, i, o) { var s; e(this, n), (s = u(this, a(n).call(this, H.page_security_questions_auth, ki, t))).nextQuestion = i, s.prevAnsweredQuestions = o, s.setTitle(s.getTitle()), s.setInstructions(s.getInstructions()), s.content = s.createForm(), s.setContent(s.content); var r = new ht(H.button_continue); return r.label = s.uiContext.getString(W.ts_authenticator_password_cta_positive), r.type = nt.Submit, r.form = Ci, r.onClick((function () { return s.onSubmitCB(s.collectUserAnswer()) })), s.addRightButton(r), s.continueButton = r, s.updateFormState(), s } return s(n, ee), i(n, [{ key: "setError", value: function (t) { this.error = !0, t && this.setInstructions(t) } }, { key: "onSubmit", value: function (t) { this.onSubmitCB = t } }, { key: "updateFormState", value: function () { this.updateSubmitButton() } }, { key: "updateSubmitButton", value: function () { this.continueButton.disabled = !this.nextQuestionInput.value.trim() } }, { key: "collectUserAnswer", value: function () { var t = this.nextQuestionInput.value; return com.ts.mobile.sdk.SecurityQuestionAndAnswer.createAnswerToQuestion(this.nextQuestion, com.ts.mobile.sdk.SecurityQuestionAnswer.createWithText(t)) } }, { key: "getTitle", value: function () { var t = W.ts_authenticator_questions_title_auth; return this.uiContext.getString(t) } }, { key: "getInstructions", value: function () { var t = W.ts_authenticator_questions_intro_auth; return this.uiContext.getString(t) } }, { key: "createForm", value: function () { var t = new Jt; t.addClass("xmui-security-questions-auth-form"), t.id = Ci, this.prevAnsweredQuestions.forEach((function (e) { var n = e.getQuestion().getSecurityQuestionText(), i = e.getAnswer().getAnswerText(), o = new yi(n, i); t.appendChild(o) })); var e = new $t(Dt.Text, H.input_security_question), n = this.nextQuestion.getSecurityQuestionText(); return e.placeholder = n, e.ariaLabel = n, e.focus(), e.scrollIntoView(), this.nextQuestionInput = e, t.appendChild(e), t.onUserInput(this.updateFormState.bind(this)), t } }]), n }(), wi = function (t) { function n(t, i) { var o; return e(this, n), (o = u(this, a(n).call(this, t, i))).prevAnsweredQuestions = [], o.supportsInlineError = !0, o } return s(n, Mt), i(n, [{ key: "showAuthUi", value: function () { this.showSecurityQuestionsAuthPage() } }, { key: "showRegUi", value: function () { this.showSecurityQuestionsRegPage() } }, { key: "setInputStep", value: function (t, e, n) { this.currentStep = n } }, { key: "showSecurityQuestionsRegPage", value: function () { var t = this, e = new vi(this.actionContext, this.currentStep); this.authError && e.setError(this.authError.getMessage()), e.onSubmit((function (n) { e.blockInteraction(); var i = com.ts.mobile.sdk.SecurityQuestionInputResponse.createSecurityQuestionAnswersInputResponse(n); t.resolveInputPromise(com.ts.mobile.sdk.InputOrControlResponse.createInputResponse(i)) })), this.showAuthenticatorPage(e) } }, { key: "promiseCancelAction", value: function (t) { return this.prevAnsweredQuestions = [], _(a(n.prototype), "promiseCancelAction", this).call(this, t) } }, { key: "showSecurityQuestionsAuthPage", value: function () { var t = this; this.authError && (this.prevAnsweredQuestions = []); var e = new bi(this.actionContext, this.currentStep.getSecurityQuestions()[0], this.prevAnsweredQuestions); this.authError && e.setError(this.authError.getMessage()), e.onSubmit((function (n) { e.blockInteraction(); var i = com.ts.mobile.sdk.SecurityQuestionInputResponse.createSecurityQuestionAnswersInputResponse([n]); t.resolveInputPromise(com.ts.mobile.sdk.InputOrControlResponse.createInputResponse(i)), t.prevAnsweredQuestions.push(n) })), this.showAuthenticatorPage(e) } }]), n }(), xi = function () { function t() { e(this, t), wt.init() } return i(t, [{ key: "startActivityIndicator", value: function (t, e) { St.activityStarted(e) } }, { key: "endActivityIndicator", value: function (t, e) { St.activityEnded(e) } }, { key: "controlFlowCancelled", value: function (t) { St.log("Control flow cancelled"), St.clearContainer(t) } }, { key: "controlFlowStarting", value: function (t) { St.log("Control flow started") } }, { key: "controlFlowEnded", value: function (t, e) { var n = t ? " with error: ".concat(t) : ""; St.log("Control flow ended" + n) } }, { key: "controlFlowActionStarting", value: function (t, e) { St.log("Control flow action starting") } }, { key: "controlFlowActionEnded", value: function (t, e, n) { St.log("Control flow action starting") } }, { key: "handleAuthenticatorUnregistration", value: function (t, e, n, i) { return Promise.resolve(com.ts.mobile.sdk.UnregistrationInput.create(0)) } }, { key: "selectAuthenticator", value: function (t, e, n) { return Pt.promiseAuthenticator(t, e, n) } }, { key: "selectAuthenticatorFallbackAction", value: function (t, e, n, i, o) { var s = St.getUsernameFromClientContext(o); return Pt.promiseAuthenticatorFallbackAction(s, t, e, n, i, o) } }, { key: "controlOptionForCancellationRequestInSession", value: function (t, e) { return e.promiseCancelAction(t) } }, { key: "createPasswordAuthSession", value: function (t, e) { return new se(t, e) } }, { key: "createPinAuthSession", value: function (t, e, n) { return new fe(t, e, n) } }, { key: "createPatternAuthSession", value: function (t, e, n, i) { return new Fe(t, e, n, i) } }, { key: "createOtpAuthSession", value: function (t, e, n, i) { return new sn(t, e, n, i) } }, { key: "createVoiceAuthSession", value: function (t, e) { throw new Error("Method not implemented.") } }, { key: "createSecurityQuestionAuthSession", value: function (t, e) { return new wi(t, e) } }, { key: "createPlaceholderAuthSession", value: function (t, e, n, i, o, s) { throw new Error("Method not implemented by demo application.") } }, { key: "getConfirmationInput", value: function (t, e, n, i, o, s) { var a = St.getUsernameFromClientContext(s); return Pt.promiseConfirmationActionInput(a, S.Confirmation, t, e, n, i, o, s) } }, { key: "getInformationResponse", value: function (t, e, n, i, o) { var s = St.getUsernameFromClientContext(o); return Pt.promiseInformationActionInput(s, S.Information, t, e, n, i, o) } }, { key: "createMobileApproveAuthSession", value: function (t, e, n) { return new he(t, e, n) } }, { key: "createTicketWaitSession", value: function (t, e) { return new dn } }, { key: "createTotpAuthSession", value: function (t, e) { return new un(t, e) } }, { key: "createFormSession", value: function (t, e) { if (e && "dynamic_form" === e.type) return new li(t, e); throw new Error("Method not implemented by demo application.") } }, { key: "createAuthenticationConfigurationSession", value: function (t) { return new Sn(t) } }, { key: "createRegistrationPromotionSession", value: function (t, e) { return new An(t, e) } }, { key: "processJsonData", value: function (t, e, n) { throw new Error("Method not implemented by demo application.") } }, { key: "handlePolicyRejection", value: function (t, e, n, i, o, s) { return Pt.promisePolicyRejectionInput(t, e, n, i, o, s) } }, { key: "handlePolicyRedirect", value: function (t, e, n, i, o) { return St.log("Policy redirection requested. redirecting to policy: [".concat(e, "] with additionalParameters: [").concat(i, "]")), Promise.resolve(com.ts.mobile.sdk.RedirectInput.create(com.ts.mobile.sdk.RedirectResponseType.RedirectToPolicy)) } }, { key: "shouldIncludeDisabledAuthenticatorsInMenu", value: function (t, e) { return !0 } }, { key: "createScanQrSession", value: function (t, e) { throw new Error("Method not implemented.") } }, { key: "createFingerprintAuthSession", value: function (t, e) { throw new Error("Method not implemented.") } }, { key: "createApprovalsSession", value: function (t) { throw new Error("Method not implemented.") } }, { key: "createTotpGenerationSession", value: function (t, e) { throw new Error("Method not implemented.") } }, { key: "createDeviceManagementSession", value: function (t) { return St.log("Starting device management session"), new $n(t) } }, { key: "createNativeFaceAuthSession", value: function (t, e) { throw new Error("Method not implemented.") } }, { key: "createFaceAuthSession", value: function (t, e) { throw new Error("Method not implemented.") } }, { key: "createDeviceBiometricsAuthSession", value: function (t, e) { throw new Error("Method not implemented.") } }, { key: "localAuthenticatorInvalidated", value: function (t) { throw new Error("Method not implemented.") } }, { key: "setLogEnabled", value: function (t) { St.setLogEnabled(t) } }], [{ key: "presentUI", value: function (t, e) { St.presentUI(t, e) } }]), t }(); export { xi as XmUIHandler };
